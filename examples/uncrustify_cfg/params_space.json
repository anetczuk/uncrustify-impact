{
    "newlines": {
        "value": "auto",
        "type": "ParamType.SET",
        "allowed": [
            "lf",
            "crlf",
            "cr",
            "auto"
        ],
        "doc": "# The type of line endings.\n#\n# Default: auto\n",
        "line": "newlines                        = auto     # lf/crlf/cr/auto"
    },
    "input_tab_size": {
        "value": 8,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# The original size of tabs in the input.\n#\n# Default: 8\n",
        "line": "input_tab_size                  = 8        # unsigned number"
    },
    "output_tab_size": {
        "value": 8,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# The size of tabs in the output (only used if align_with_tabs=true).\n#\n# Default: 8\n",
        "line": "output_tab_size                 = 8        # unsigned number"
    },
    "string_escape_char": {
        "value": 92,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# The ASCII value of the string escape char, usually 92 (\\) or (Pawn) 94 (^).\n#\n# Default: 92\n",
        "line": "string_escape_char              = 92       # unsigned number"
    },
    "string_escape_char2": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# Alternate string escape char (usually only used for Pawn).\n# Only works right before the quote char.\n",
        "line": "string_escape_char2             = 0        # unsigned number"
    },
    "string_replace_tab_chars": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Replace tab characters found in string literals with the escape sequence \\t\n# instead.\n",
        "line": "string_replace_tab_chars        = false    # true/false"
    },
    "tok_split_gte": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Allow interpreting '>=' and '>>=' as part of a template in code like\n# 'void f(list<list<B>>=val);'. If true, 'assert(x<0 && y>=3)' will be broken.\n# Improvements to template detection may make this option obsolete.\n",
        "line": "tok_split_gte                   = false    # true/false"
    },
    "disable_processing_cmt": {
        "value": "\" *INDENT-OFF*\"",
        "type": "ParamType.STRING",
        "allowed": null,
        "doc": "# Specify the marker used in comments to disable processing of part of the\n# file.\n#\n# Default:  *INDENT-OFF*\n",
        "line": "disable_processing_cmt          = \" *INDENT-OFF*\"      # string"
    },
    "enable_processing_cmt": {
        "value": "\" *INDENT-ON*\"",
        "type": "ParamType.STRING",
        "allowed": null,
        "doc": "# Specify the marker used in comments to (re)enable processing in a file.\n#\n# Default:  *INDENT-ON*\n",
        "line": "enable_processing_cmt           = \" *INDENT-ON*\"     # string"
    },
    "enable_digraphs": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Enable parsing of digraphs.\n",
        "line": "enable_digraphs                 = false    # true/false"
    },
    "utf8_bom": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove the UTF-8 BOM (recommend 'remove').\n",
        "line": "utf8_bom                        = ignore   # ignore/add/remove/force"
    },
    "utf8_byte": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# If the file contains bytes with values between 128 and 255, but is not\n# UTF-8, then output as UTF-8.\n",
        "line": "utf8_byte                       = false    # true/false"
    },
    "utf8_force": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Force the output encoding to UTF-8.\n",
        "line": "utf8_force                      = false    # true/false"
    },
    "sp_arith": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space around non-assignment symbolic operators ('+', '/', '%',\n# '<<', and so forth).\n",
        "line": "sp_arith                        = ignore   # ignore/add/remove/force"
    },
    "sp_arith_additive": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space around arithmetic operators '+' and '-'.\n#\n# Overrides sp_arith.\n",
        "line": "sp_arith_additive               = ignore   # ignore/add/remove/force"
    },
    "sp_assign": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space around assignment operator '=', '+=', etc.\n",
        "line": "sp_assign                       = ignore   # ignore/add/remove/force"
    },
    "sp_cpp_lambda_assign": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space around '=' in C++11 lambda capture specifications.\n#\n# Overrides sp_assign.\n",
        "line": "sp_cpp_lambda_assign            = ignore   # ignore/add/remove/force"
    },
    "sp_cpp_lambda_paren": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space after the capture specification in C++11 lambda.\n",
        "line": "sp_cpp_lambda_paren             = ignore   # ignore/add/remove/force"
    },
    "sp_assign_default": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space around assignment operator '=' in a prototype.\n#\n# If set to ignore, use sp_assign.\n",
        "line": "sp_assign_default               = ignore   # ignore/add/remove/force"
    },
    "sp_before_assign": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space before assignment operator '=', '+=', etc.\n#\n# Overrides sp_assign.\n",
        "line": "sp_before_assign                = ignore   # ignore/add/remove/force"
    },
    "sp_after_assign": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space after assignment operator '=', '+=', etc.\n#\n# Overrides sp_assign.\n",
        "line": "sp_after_assign                 = ignore   # ignore/add/remove/force"
    },
    "sp_enum_paren": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space in 'NS_ENUM ('.\n",
        "line": "sp_enum_paren                   = ignore   # ignore/add/remove/force"
    },
    "sp_enum_assign": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space around assignment '=' in enum.\n",
        "line": "sp_enum_assign                  = ignore   # ignore/add/remove/force"
    },
    "sp_enum_before_assign": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space before assignment '=' in enum.\n#\n# Overrides sp_enum_assign.\n",
        "line": "sp_enum_before_assign           = ignore   # ignore/add/remove/force"
    },
    "sp_enum_after_assign": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space after assignment '=' in enum.\n#\n# Overrides sp_enum_assign.\n",
        "line": "sp_enum_after_assign            = ignore   # ignore/add/remove/force"
    },
    "sp_enum_colon": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space around assignment ':' in enum.\n",
        "line": "sp_enum_colon                   = ignore   # ignore/add/remove/force"
    },
    "sp_pp_concat": {
        "value": "add",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space around preprocessor '##' concatenation operator.\n#\n# Default: add\n",
        "line": "sp_pp_concat                    = add      # ignore/add/remove/force"
    },
    "sp_pp_stringify": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space after preprocessor '#' stringify operator.\n# Also affects the '#@' charizing operator.\n",
        "line": "sp_pp_stringify                 = ignore   # ignore/add/remove/force"
    },
    "sp_before_pp_stringify": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space before preprocessor '#' stringify operator\n# as in '#define x(y) L#y'.\n",
        "line": "sp_before_pp_stringify          = ignore   # ignore/add/remove/force"
    },
    "sp_bool": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space around boolean operators '&&' and '||'.\n",
        "line": "sp_bool                         = ignore   # ignore/add/remove/force"
    },
    "sp_compare": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space around compare operator '<', '>', '==', etc.\n",
        "line": "sp_compare                      = ignore   # ignore/add/remove/force"
    },
    "sp_inside_paren": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space inside '(' and ')'.\n",
        "line": "sp_inside_paren                 = ignore   # ignore/add/remove/force"
    },
    "sp_paren_paren": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space between nested parentheses, i.e. '((' vs. ') )'.\n",
        "line": "sp_paren_paren                  = ignore   # ignore/add/remove/force"
    },
    "sp_cparen_oparen": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space between back-to-back parentheses, i.e. ')(' vs. ') ('.\n",
        "line": "sp_cparen_oparen                = ignore   # ignore/add/remove/force"
    },
    "sp_balance_nested_parens": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to balance spaces inside nested parentheses.\n",
        "line": "sp_balance_nested_parens        = false    # true/false"
    },
    "sp_paren_brace": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space between ')' and '{'.\n",
        "line": "sp_paren_brace                  = ignore   # ignore/add/remove/force"
    },
    "sp_brace_brace": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space between nested braces, i.e. '{{' vs '{ {'.\n",
        "line": "sp_brace_brace                  = ignore   # ignore/add/remove/force"
    },
    "sp_before_ptr_star": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space before pointer star '*'.\n",
        "line": "sp_before_ptr_star              = ignore   # ignore/add/remove/force"
    },
    "sp_before_unnamed_ptr_star": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space before pointer star '*' that isn't followed by a\n# variable name. If set to 'ignore', sp_before_ptr_star is used instead.\n",
        "line": "sp_before_unnamed_ptr_star      = ignore   # ignore/add/remove/force"
    },
    "sp_between_ptr_star": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space between pointer stars '*'.\n",
        "line": "sp_between_ptr_star             = ignore   # ignore/add/remove/force"
    },
    "sp_after_ptr_star": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space after pointer star '*', if followed by a word.\n",
        "line": "sp_after_ptr_star               = ignore   # ignore/add/remove/force"
    },
    "sp_after_ptr_block_caret": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space after pointer caret '^', if followed by a word.\n",
        "line": "sp_after_ptr_block_caret        = ignore   # ignore/add/remove/force"
    },
    "sp_after_ptr_star_qualifier": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space after pointer star '*', if followed by a qualifier.\n",
        "line": "sp_after_ptr_star_qualifier     = ignore   # ignore/add/remove/force"
    },
    "sp_after_ptr_star_func": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space after a pointer star '*', if followed by a function\n# prototype or function definition.\n",
        "line": "sp_after_ptr_star_func          = ignore   # ignore/add/remove/force"
    },
    "sp_ptr_star_paren": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space after a pointer star '*', if followed by an open\n# parenthesis, as in 'void* (*)().\n",
        "line": "sp_ptr_star_paren               = ignore   # ignore/add/remove/force"
    },
    "sp_before_ptr_star_func": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space before a pointer star '*', if followed by a function\n# prototype or function definition.\n",
        "line": "sp_before_ptr_star_func         = ignore   # ignore/add/remove/force"
    },
    "sp_before_byref": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space before a reference sign '&'.\n",
        "line": "sp_before_byref                 = ignore   # ignore/add/remove/force"
    },
    "sp_before_unnamed_byref": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space before a reference sign '&' that isn't followed by a\n# variable name. If set to 'ignore', sp_before_byref is used instead.\n",
        "line": "sp_before_unnamed_byref         = ignore   # ignore/add/remove/force"
    },
    "sp_after_byref": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space after reference sign '&', if followed by a word.\n",
        "line": "sp_after_byref                  = ignore   # ignore/add/remove/force"
    },
    "sp_after_byref_func": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space after a reference sign '&', if followed by a function\n# prototype or function definition.\n",
        "line": "sp_after_byref_func             = ignore   # ignore/add/remove/force"
    },
    "sp_before_byref_func": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space before a reference sign '&', if followed by a function\n# prototype or function definition.\n",
        "line": "sp_before_byref_func            = ignore   # ignore/add/remove/force"
    },
    "sp_after_type": {
        "value": "force",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space between type and word.\n#\n# Default: force\n",
        "line": "sp_after_type                   = force    # ignore/add/remove/force"
    },
    "sp_after_decltype": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space between 'decltype(...)' and word.\n",
        "line": "sp_after_decltype               = ignore   # ignore/add/remove/force"
    },
    "sp_before_template_paren": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# (D) Add or remove space before the parenthesis in the D constructs\n# 'template Foo(' and 'class Foo('.\n",
        "line": "sp_before_template_paren        = ignore   # ignore/add/remove/force"
    },
    "sp_template_angle": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space between 'template' and '<'.\n# If set to ignore, sp_before_angle is used.\n",
        "line": "sp_template_angle               = ignore   # ignore/add/remove/force"
    },
    "sp_before_angle": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space before '<'.\n",
        "line": "sp_before_angle                 = ignore   # ignore/add/remove/force"
    },
    "sp_inside_angle": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space inside '<' and '>'.\n",
        "line": "sp_inside_angle                 = ignore   # ignore/add/remove/force"
    },
    "sp_inside_angle_empty": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space inside '<>'.\n",
        "line": "sp_inside_angle_empty           = ignore   # ignore/add/remove/force"
    },
    "sp_angle_colon": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space between '>' and ':'.\n",
        "line": "sp_angle_colon                  = ignore   # ignore/add/remove/force"
    },
    "sp_after_angle": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space after '<>'.\n",
        "line": "sp_after_angle                  = ignore   # ignore/add/remove/force"
    },
    "sp_angle_paren": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space between '>' and '(' as found in 'new List<byte>(foo);'.\n",
        "line": "sp_angle_paren                  = ignore   # ignore/add/remove/force"
    },
    "sp_angle_paren_empty": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space between '>' and '()' as found in 'new List<byte>();'.\n",
        "line": "sp_angle_paren_empty            = ignore   # ignore/add/remove/force"
    },
    "sp_angle_word": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space between '>' and a word as in 'List<byte> m;' or\n# 'template <typename T> static ...'.\n",
        "line": "sp_angle_word                   = ignore   # ignore/add/remove/force"
    },
    "sp_angle_shift": {
        "value": "add",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space between '>' and '>' in '>>' (template stuff).\n#\n# Default: add\n",
        "line": "sp_angle_shift                  = add      # ignore/add/remove/force"
    },
    "sp_permit_cpp11_shift": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# (C++11) Permit removal of the space between '>>' in 'foo<bar<int> >'. Note\n# that sp_angle_shift cannot remove the space without this option.\n",
        "line": "sp_permit_cpp11_shift           = false    # true/false"
    },
    "sp_before_sparen": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space before '(' of control statements ('if', 'for', 'switch',\n# 'while', etc.).\n",
        "line": "sp_before_sparen                = ignore   # ignore/add/remove/force"
    },
    "sp_inside_sparen": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space inside '(' and ')' of control statements.\n",
        "line": "sp_inside_sparen                = ignore   # ignore/add/remove/force"
    },
    "sp_inside_sparen_open": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space after '(' of control statements.\n#\n# Overrides sp_inside_sparen.\n",
        "line": "sp_inside_sparen_open           = ignore   # ignore/add/remove/force"
    },
    "sp_inside_sparen_close": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space before ')' of control statements.\n#\n# Overrides sp_inside_sparen.\n",
        "line": "sp_inside_sparen_close          = ignore   # ignore/add/remove/force"
    },
    "sp_after_sparen": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space after ')' of control statements.\n",
        "line": "sp_after_sparen                 = ignore   # ignore/add/remove/force"
    },
    "sp_sparen_brace": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space between ')' and '{' of of control statements.\n",
        "line": "sp_sparen_brace                 = ignore   # ignore/add/remove/force"
    },
    "sp_invariant_paren": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# (D) Add or remove space between 'invariant' and '('.\n",
        "line": "sp_invariant_paren              = ignore   # ignore/add/remove/force"
    },
    "sp_after_invariant_paren": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# (D) Add or remove space after the ')' in 'invariant (C) c'.\n",
        "line": "sp_after_invariant_paren        = ignore   # ignore/add/remove/force"
    },
    "sp_special_semi": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space before empty statement ';' on 'if', 'for' and 'while'.\n",
        "line": "sp_special_semi                 = ignore   # ignore/add/remove/force"
    },
    "sp_before_semi": {
        "value": "remove",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space before ';'.\n#\n# Default: remove\n",
        "line": "sp_before_semi                  = remove   # ignore/add/remove/force"
    },
    "sp_before_semi_for": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space before ';' in non-empty 'for' statements.\n",
        "line": "sp_before_semi_for              = ignore   # ignore/add/remove/force"
    },
    "sp_before_semi_for_empty": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space before a semicolon of an empty part of a for statement.\n",
        "line": "sp_before_semi_for_empty        = ignore   # ignore/add/remove/force"
    },
    "sp_after_semi": {
        "value": "add",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space after ';', except when followed by a comment.\n#\n# Default: add\n",
        "line": "sp_after_semi                   = add      # ignore/add/remove/force"
    },
    "sp_after_semi_for": {
        "value": "force",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space after ';' in non-empty 'for' statements.\n#\n# Default: force\n",
        "line": "sp_after_semi_for               = force    # ignore/add/remove/force"
    },
    "sp_after_semi_for_empty": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space after the final semicolon of an empty part of a for\n# statement, as in 'for ( ; ; <here> )'.\n",
        "line": "sp_after_semi_for_empty         = ignore   # ignore/add/remove/force"
    },
    "sp_before_square": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space before '[' (except '[]').\n",
        "line": "sp_before_square                = ignore   # ignore/add/remove/force"
    },
    "sp_before_squares": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space before '[]'.\n",
        "line": "sp_before_squares               = ignore   # ignore/add/remove/force"
    },
    "sp_cpp_before_struct_binding": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space before C++17 structured bindings.\n",
        "line": "sp_cpp_before_struct_binding    = ignore   # ignore/add/remove/force"
    },
    "sp_inside_square": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space inside a non-empty '[' and ']'.\n",
        "line": "sp_inside_square                = ignore   # ignore/add/remove/force"
    },
    "sp_inside_square_oc_array": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# (OC) Add or remove space inside a non-empty Objective-C boxed array '@[' and\n# ']'. If set to ignore, sp_inside_square is used.\n",
        "line": "sp_inside_square_oc_array       = ignore   # ignore/add/remove/force"
    },
    "sp_after_comma": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space after ',', i.e. 'a,b' vs. 'a, b'.\n",
        "line": "sp_after_comma                  = ignore   # ignore/add/remove/force"
    },
    "sp_before_comma": {
        "value": "remove",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space before ','.\n#\n# Default: remove\n",
        "line": "sp_before_comma                 = remove   # ignore/add/remove/force"
    },
    "sp_after_mdatype_commas": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# (C#) Add or remove space between ',' and ']' in multidimensional array type\n# like 'int[,,]'.\n",
        "line": "sp_after_mdatype_commas         = ignore   # ignore/add/remove/force"
    },
    "sp_before_mdatype_commas": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# (C#) Add or remove space between '[' and ',' in multidimensional array type\n# like 'int[,,]'.\n",
        "line": "sp_before_mdatype_commas        = ignore   # ignore/add/remove/force"
    },
    "sp_between_mdatype_commas": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# (C#) Add or remove space between ',' in multidimensional array type\n# like 'int[,,]'.\n",
        "line": "sp_between_mdatype_commas       = ignore   # ignore/add/remove/force"
    },
    "sp_paren_comma": {
        "value": "force",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space between an open parenthesis and comma,\n# i.e. '(,' vs. '( ,'.\n#\n# Default: force\n",
        "line": "sp_paren_comma                  = force    # ignore/add/remove/force"
    },
    "sp_before_ellipsis": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space before the variadic '...' when preceded by a\n# non-punctuator.\n",
        "line": "sp_before_ellipsis              = ignore   # ignore/add/remove/force"
    },
    "sp_type_ellipsis": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space between a type and '...'.\n",
        "line": "sp_type_ellipsis                = ignore   # ignore/add/remove/force"
    },
    "sp_type_question": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# (D) Add or remove space between a type and '?'.\n",
        "line": "sp_type_question                = ignore   # ignore/add/remove/force"
    },
    "sp_paren_ellipsis": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space between ')' and '...'.\n",
        "line": "sp_paren_ellipsis               = ignore   # ignore/add/remove/force"
    },
    "sp_paren_qualifier": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space between ')' and a qualifier such as 'const'.\n",
        "line": "sp_paren_qualifier              = ignore   # ignore/add/remove/force"
    },
    "sp_paren_noexcept": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space between ')' and 'noexcept'.\n",
        "line": "sp_paren_noexcept               = ignore   # ignore/add/remove/force"
    },
    "sp_after_class_colon": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space after class ':'.\n",
        "line": "sp_after_class_colon            = ignore   # ignore/add/remove/force"
    },
    "sp_before_class_colon": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space before class ':'.\n",
        "line": "sp_before_class_colon           = ignore   # ignore/add/remove/force"
    },
    "sp_after_constr_colon": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space after class constructor ':'.\n",
        "line": "sp_after_constr_colon           = ignore   # ignore/add/remove/force"
    },
    "sp_before_constr_colon": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space before class constructor ':'.\n",
        "line": "sp_before_constr_colon          = ignore   # ignore/add/remove/force"
    },
    "sp_before_case_colon": {
        "value": "remove",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space before case ':'.\n#\n# Default: remove\n",
        "line": "sp_before_case_colon            = remove   # ignore/add/remove/force"
    },
    "sp_after_operator": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space between 'operator' and operator sign.\n",
        "line": "sp_after_operator               = ignore   # ignore/add/remove/force"
    },
    "sp_after_operator_sym": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space between the operator symbol and the open parenthesis, as\n# in 'operator ++('.\n",
        "line": "sp_after_operator_sym           = ignore   # ignore/add/remove/force"
    },
    "sp_after_operator_sym_empty": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Overrides sp_after_operator_sym when the operator has no arguments, as in\n# 'operator *()'.\n",
        "line": "sp_after_operator_sym_empty     = ignore   # ignore/add/remove/force"
    },
    "sp_after_cast": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space after C/D cast, i.e. 'cast(int)a' vs. 'cast(int) a' or\n# '(int)a' vs. '(int) a'.\n",
        "line": "sp_after_cast                   = ignore   # ignore/add/remove/force"
    },
    "sp_inside_paren_cast": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove spaces inside cast parentheses.\n",
        "line": "sp_inside_paren_cast            = ignore   # ignore/add/remove/force"
    },
    "sp_cpp_cast_paren": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space between the type and open parenthesis in a C++ cast,\n# i.e. 'int(exp)' vs. 'int (exp)'.\n",
        "line": "sp_cpp_cast_paren               = ignore   # ignore/add/remove/force"
    },
    "sp_sizeof_paren": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space between 'sizeof' and '('.\n",
        "line": "sp_sizeof_paren                 = ignore   # ignore/add/remove/force"
    },
    "sp_sizeof_ellipsis": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space between 'sizeof' and '...'.\n",
        "line": "sp_sizeof_ellipsis              = ignore   # ignore/add/remove/force"
    },
    "sp_sizeof_ellipsis_paren": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space between 'sizeof...' and '('.\n",
        "line": "sp_sizeof_ellipsis_paren        = ignore   # ignore/add/remove/force"
    },
    "sp_decltype_paren": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space between 'decltype' and '('.\n",
        "line": "sp_decltype_paren               = ignore   # ignore/add/remove/force"
    },
    "sp_after_tag": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# (Pawn) Add or remove space after the tag keyword.\n",
        "line": "sp_after_tag                    = ignore   # ignore/add/remove/force"
    },
    "sp_inside_braces_enum": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space inside enum '{' and '}'.\n",
        "line": "sp_inside_braces_enum           = ignore   # ignore/add/remove/force"
    },
    "sp_inside_braces_struct": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space inside struct/union '{' and '}'.\n",
        "line": "sp_inside_braces_struct         = ignore   # ignore/add/remove/force"
    },
    "sp_inside_braces_oc_dict": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# (OC) Add or remove space inside Objective-C boxed dictionary '{' and '}'\n",
        "line": "sp_inside_braces_oc_dict        = ignore   # ignore/add/remove/force"
    },
    "sp_after_type_brace_init_lst_open": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space after open brace in an unnamed temporary\n# direct-list-initialization.\n",
        "line": "sp_after_type_brace_init_lst_open = ignore   # ignore/add/remove/force"
    },
    "sp_before_type_brace_init_lst_close": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space before close brace in an unnamed temporary\n# direct-list-initialization.\n",
        "line": "sp_before_type_brace_init_lst_close = ignore   # ignore/add/remove/force"
    },
    "sp_inside_type_brace_init_lst": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space inside an unnamed temporary direct-list-initialization.\n",
        "line": "sp_inside_type_brace_init_lst   = ignore   # ignore/add/remove/force"
    },
    "sp_inside_braces": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space inside '{' and '}'.\n",
        "line": "sp_inside_braces                = ignore   # ignore/add/remove/force"
    },
    "sp_inside_braces_empty": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space inside '{}'.\n",
        "line": "sp_inside_braces_empty          = ignore   # ignore/add/remove/force"
    },
    "sp_type_func": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space between return type and function name. A minimum of 1\n# is forced except for pointer return types.\n",
        "line": "sp_type_func                    = ignore   # ignore/add/remove/force"
    },
    "sp_type_brace_init_lst": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space between type and open brace of an unnamed temporary\n# direct-list-initialization.\n",
        "line": "sp_type_brace_init_lst          = ignore   # ignore/add/remove/force"
    },
    "sp_func_proto_paren": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space between function name and '(' on function declaration.\n",
        "line": "sp_func_proto_paren             = ignore   # ignore/add/remove/force"
    },
    "sp_func_proto_paren_empty": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space between function name and '()' on function declaration\n# without parameters.\n",
        "line": "sp_func_proto_paren_empty       = ignore   # ignore/add/remove/force"
    },
    "sp_func_def_paren": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space between function name and '(' on function definition.\n",
        "line": "sp_func_def_paren               = ignore   # ignore/add/remove/force"
    },
    "sp_func_def_paren_empty": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space between function name and '()' on function definition\n# without parameters.\n",
        "line": "sp_func_def_paren_empty         = ignore   # ignore/add/remove/force"
    },
    "sp_inside_fparens": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space inside empty function '()'.\n",
        "line": "sp_inside_fparens               = ignore   # ignore/add/remove/force"
    },
    "sp_inside_fparen": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space inside function '(' and ')'.\n",
        "line": "sp_inside_fparen                = ignore   # ignore/add/remove/force"
    },
    "sp_inside_tparen": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space inside the first parentheses in a function type, as in\n# 'void (*x)(...)'.\n",
        "line": "sp_inside_tparen                = ignore   # ignore/add/remove/force"
    },
    "sp_after_tparen_close": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space between the ')' and '(' in a function type, as in\n# 'void (*x)(...)'.\n",
        "line": "sp_after_tparen_close           = ignore   # ignore/add/remove/force"
    },
    "sp_square_fparen": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space between ']' and '(' when part of a function call.\n",
        "line": "sp_square_fparen                = ignore   # ignore/add/remove/force"
    },
    "sp_fparen_brace": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space between ')' and '{' of function.\n",
        "line": "sp_fparen_brace                 = ignore   # ignore/add/remove/force"
    },
    "sp_fparen_brace_initializer": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space between ')' and '{' of s function call in object\n# initialization.\n#\n# Overrides sp_fparen_brace.\n",
        "line": "sp_fparen_brace_initializer     = ignore   # ignore/add/remove/force"
    },
    "sp_fparen_dbrace": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# (Java) Add or remove space between ')' and '{{' of double brace initializer.\n",
        "line": "sp_fparen_dbrace                = ignore   # ignore/add/remove/force"
    },
    "sp_func_call_paren": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space between function name and '(' on function calls.\n",
        "line": "sp_func_call_paren              = ignore   # ignore/add/remove/force"
    },
    "sp_func_call_paren_empty": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space between function name and '()' on function calls without\n# parameters. If set to 'ignore' (the default), sp_func_call_paren is used.\n",
        "line": "sp_func_call_paren_empty        = ignore   # ignore/add/remove/force"
    },
    "sp_func_call_user_paren": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space between the user function name and '(' on function\n# calls. You need to set a keyword to be a user function in the config file,\n# like:\n#   set func_call_user tr _ i18n\n",
        "line": "sp_func_call_user_paren         = ignore   # ignore/add/remove/force"
    },
    "sp_func_call_user_inside_fparen": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space inside user function '(' and ')'.\n",
        "line": "sp_func_call_user_inside_fparen = ignore   # ignore/add/remove/force"
    },
    "sp_func_call_user_paren_paren": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space between nested parentheses with user functions,\n# i.e. '((' vs. '( ('.\n",
        "line": "sp_func_call_user_paren_paren   = ignore   # ignore/add/remove/force"
    },
    "sp_func_class_paren": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space between a constructor/destructor and the open\n# parenthesis.\n",
        "line": "sp_func_class_paren             = ignore   # ignore/add/remove/force"
    },
    "sp_func_class_paren_empty": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space between a constructor without parameters or destructor\n# and '()'.\n",
        "line": "sp_func_class_paren_empty       = ignore   # ignore/add/remove/force"
    },
    "sp_return_paren": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space between 'return' and '('.\n",
        "line": "sp_return_paren                 = ignore   # ignore/add/remove/force"
    },
    "sp_return_brace": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space between 'return' and '{'.\n",
        "line": "sp_return_brace                 = ignore   # ignore/add/remove/force"
    },
    "sp_attribute_paren": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space between '__attribute__' and '('.\n",
        "line": "sp_attribute_paren              = ignore   # ignore/add/remove/force"
    },
    "sp_defined_paren": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space between 'defined' and '(' in '#if defined (FOO)'.\n",
        "line": "sp_defined_paren                = ignore   # ignore/add/remove/force"
    },
    "sp_throw_paren": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space between 'throw' and '(' in 'throw (something)'.\n",
        "line": "sp_throw_paren                  = ignore   # ignore/add/remove/force"
    },
    "sp_after_throw": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space between 'throw' and anything other than '(' as in\n# '@throw [...];'.\n",
        "line": "sp_after_throw                  = ignore   # ignore/add/remove/force"
    },
    "sp_catch_paren": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space between 'catch' and '(' in 'catch (something) { }'.\n# If set to ignore, sp_before_sparen is used.\n",
        "line": "sp_catch_paren                  = ignore   # ignore/add/remove/force"
    },
    "sp_oc_catch_paren": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# (OC) Add or remove space between '@catch' and '('\n# in '@catch (something) { }'. If set to ignore, sp_catch_paren is used.\n",
        "line": "sp_oc_catch_paren               = ignore   # ignore/add/remove/force"
    },
    "sp_oc_classname_paren": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# (OC) Add or remove space between class name and '('\n# in '@interface className(categoryName)<ProtocolName>:BaseClass'\n",
        "line": "sp_oc_classname_paren           = ignore   # ignore/add/remove/force"
    },
    "sp_version_paren": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# (D) Add or remove space between 'version' and '('\n# in 'version (something) { }'. If set to ignore, sp_before_sparen is used.\n",
        "line": "sp_version_paren                = ignore   # ignore/add/remove/force"
    },
    "sp_scope_paren": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# (D) Add or remove space between 'scope' and '('\n# in 'scope (something) { }'. If set to ignore, sp_before_sparen is used.\n",
        "line": "sp_scope_paren                  = ignore   # ignore/add/remove/force"
    },
    "sp_super_paren": {
        "value": "remove",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space between 'super' and '(' in 'super (something)'.\n#\n# Default: remove\n",
        "line": "sp_super_paren                  = remove   # ignore/add/remove/force"
    },
    "sp_this_paren": {
        "value": "remove",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space between 'this' and '(' in 'this (something)'.\n#\n# Default: remove\n",
        "line": "sp_this_paren                   = remove   # ignore/add/remove/force"
    },
    "sp_macro": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space between a macro name and its definition.\n",
        "line": "sp_macro                        = ignore   # ignore/add/remove/force"
    },
    "sp_macro_func": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space between a macro function ')' and its definition.\n",
        "line": "sp_macro_func                   = ignore   # ignore/add/remove/force"
    },
    "sp_else_brace": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space between 'else' and '{' if on the same line.\n",
        "line": "sp_else_brace                   = ignore   # ignore/add/remove/force"
    },
    "sp_brace_else": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space between '}' and 'else' if on the same line.\n",
        "line": "sp_brace_else                   = ignore   # ignore/add/remove/force"
    },
    "sp_brace_typedef": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space between '}' and the name of a typedef on the same line.\n",
        "line": "sp_brace_typedef                = ignore   # ignore/add/remove/force"
    },
    "sp_catch_brace": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space before the '{' of a 'catch' statement, if the '{' and\n# 'catch' are on the same line, as in 'catch (decl) <here> {'.\n",
        "line": "sp_catch_brace                  = ignore   # ignore/add/remove/force"
    },
    "sp_oc_catch_brace": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# (OC) Add or remove space before the '{' of a '@catch' statement, if the '{'\n# and '@catch' are on the same line, as in '@catch (decl) <here> {'.\n# If set to ignore, sp_catch_brace is used.\n",
        "line": "sp_oc_catch_brace               = ignore   # ignore/add/remove/force"
    },
    "sp_brace_catch": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space between '}' and 'catch' if on the same line.\n",
        "line": "sp_brace_catch                  = ignore   # ignore/add/remove/force"
    },
    "sp_oc_brace_catch": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# (OC) Add or remove space between '}' and '@catch' if on the same line.\n# If set to ignore, sp_brace_catch is used.\n",
        "line": "sp_oc_brace_catch               = ignore   # ignore/add/remove/force"
    },
    "sp_finally_brace": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space between 'finally' and '{' if on the same line.\n",
        "line": "sp_finally_brace                = ignore   # ignore/add/remove/force"
    },
    "sp_brace_finally": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space between '}' and 'finally' if on the same line.\n",
        "line": "sp_brace_finally                = ignore   # ignore/add/remove/force"
    },
    "sp_try_brace": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space between 'try' and '{' if on the same line.\n",
        "line": "sp_try_brace                    = ignore   # ignore/add/remove/force"
    },
    "sp_getset_brace": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space between get/set and '{' if on the same line.\n",
        "line": "sp_getset_brace                 = ignore   # ignore/add/remove/force"
    },
    "sp_word_brace": {
        "value": "add",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space between a variable and '{' for C++ uniform\n# initialization.\n#\n# Default: add\n",
        "line": "sp_word_brace                   = add      # ignore/add/remove/force"
    },
    "sp_word_brace_ns": {
        "value": "add",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space between a variable and '{' for a namespace.\n#\n# Default: add\n",
        "line": "sp_word_brace_ns                = add      # ignore/add/remove/force"
    },
    "sp_before_dc": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space before the '::' operator.\n",
        "line": "sp_before_dc                    = ignore   # ignore/add/remove/force"
    },
    "sp_after_dc": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space after the '::' operator.\n",
        "line": "sp_after_dc                     = ignore   # ignore/add/remove/force"
    },
    "sp_d_array_colon": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# (D) Add or remove around the D named array initializer ':' operator.\n",
        "line": "sp_d_array_colon                = ignore   # ignore/add/remove/force"
    },
    "sp_not": {
        "value": "remove",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space after the '!' (not) unary operator.\n#\n# Default: remove\n",
        "line": "sp_not                          = remove   # ignore/add/remove/force"
    },
    "sp_inv": {
        "value": "remove",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space after the '~' (invert) unary operator.\n#\n# Default: remove\n",
        "line": "sp_inv                          = remove   # ignore/add/remove/force"
    },
    "sp_addr": {
        "value": "remove",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space after the '&' (address-of) unary operator. This does not\n# affect the spacing after a '&' that is part of a type.\n#\n# Default: remove\n",
        "line": "sp_addr                         = remove   # ignore/add/remove/force"
    },
    "sp_member": {
        "value": "remove",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space around the '.' or '->' operators.\n#\n# Default: remove\n",
        "line": "sp_member                       = remove   # ignore/add/remove/force"
    },
    "sp_deref": {
        "value": "remove",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space after the '*' (dereference) unary operator. This does\n# not affect the spacing after a '*' that is part of a type.\n#\n# Default: remove\n",
        "line": "sp_deref                        = remove   # ignore/add/remove/force"
    },
    "sp_sign": {
        "value": "remove",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space after '+' or '-', as in 'x = -5' or 'y = +7'.\n#\n# Default: remove\n",
        "line": "sp_sign                         = remove   # ignore/add/remove/force"
    },
    "sp_incdec": {
        "value": "remove",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space between '++' and '--' the word to which it is being\n# applied, as in '(--x)' or 'y++;'.\n#\n# Default: remove\n",
        "line": "sp_incdec                       = remove   # ignore/add/remove/force"
    },
    "sp_before_nl_cont": {
        "value": "add",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space before a backslash-newline at the end of a line.\n#\n# Default: add\n",
        "line": "sp_before_nl_cont               = add      # ignore/add/remove/force"
    },
    "sp_after_oc_scope": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# (OC) Add or remove space after the scope '+' or '-', as in '-(void) foo;'\n# or '+(int) bar;'.\n",
        "line": "sp_after_oc_scope               = ignore   # ignore/add/remove/force"
    },
    "sp_after_oc_colon": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# (OC) Add or remove space after the colon in message specs,\n# i.e. '-(int) f:(int) x;' vs. '-(int) f: (int) x;'.\n",
        "line": "sp_after_oc_colon               = ignore   # ignore/add/remove/force"
    },
    "sp_before_oc_colon": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# (OC) Add or remove space before the colon in message specs,\n# i.e. '-(int) f: (int) x;' vs. '-(int) f : (int) x;'.\n",
        "line": "sp_before_oc_colon              = ignore   # ignore/add/remove/force"
    },
    "sp_after_oc_dict_colon": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# (OC) Add or remove space after the colon in immutable dictionary expression\n# 'NSDictionary *test = @{@\"foo\" :@\"bar\"};'.\n",
        "line": "sp_after_oc_dict_colon          = ignore   # ignore/add/remove/force"
    },
    "sp_before_oc_dict_colon": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# (OC) Add or remove space before the colon in immutable dictionary expression\n# 'NSDictionary *test = @{@\"foo\" :@\"bar\"};'.\n",
        "line": "sp_before_oc_dict_colon         = ignore   # ignore/add/remove/force"
    },
    "sp_after_send_oc_colon": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# (OC) Add or remove space after the colon in message specs,\n# i.e. '[object setValue:1];' vs. '[object setValue: 1];'.\n",
        "line": "sp_after_send_oc_colon          = ignore   # ignore/add/remove/force"
    },
    "sp_before_send_oc_colon": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# (OC) Add or remove space before the colon in message specs,\n# i.e. '[object setValue:1];' vs. '[object setValue :1];'.\n",
        "line": "sp_before_send_oc_colon         = ignore   # ignore/add/remove/force"
    },
    "sp_after_oc_type": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# (OC) Add or remove space after the (type) in message specs,\n# i.e. '-(int)f: (int) x;' vs. '-(int)f: (int)x;'.\n",
        "line": "sp_after_oc_type                = ignore   # ignore/add/remove/force"
    },
    "sp_after_oc_return_type": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# (OC) Add or remove space after the first (type) in message specs,\n# i.e. '-(int) f:(int)x;' vs. '-(int)f:(int)x;'.\n",
        "line": "sp_after_oc_return_type         = ignore   # ignore/add/remove/force"
    },
    "sp_after_oc_at_sel": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# (OC) Add or remove space between '@selector' and '(',\n# i.e. '@selector(msgName)' vs. '@selector (msgName)'.\n# Also applies to '@protocol()' constructs.\n",
        "line": "sp_after_oc_at_sel              = ignore   # ignore/add/remove/force"
    },
    "sp_after_oc_at_sel_parens": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# (OC) Add or remove space between '@selector(x)' and the following word,\n# i.e. '@selector(foo) a:' vs. '@selector(foo)a:'.\n",
        "line": "sp_after_oc_at_sel_parens       = ignore   # ignore/add/remove/force"
    },
    "sp_inside_oc_at_sel_parens": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# (OC) Add or remove space inside '@selector' parentheses,\n# i.e. '@selector(foo)' vs. '@selector( foo )'.\n# Also applies to '@protocol()' constructs.\n",
        "line": "sp_inside_oc_at_sel_parens      = ignore   # ignore/add/remove/force"
    },
    "sp_before_oc_block_caret": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# (OC) Add or remove space before a block pointer caret,\n# i.e. '^int (int arg){...}' vs. ' ^int (int arg){...}'.\n",
        "line": "sp_before_oc_block_caret        = ignore   # ignore/add/remove/force"
    },
    "sp_after_oc_block_caret": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# (OC) Add or remove space after a block pointer caret,\n# i.e. '^int (int arg){...}' vs. '^ int (int arg){...}'.\n",
        "line": "sp_after_oc_block_caret         = ignore   # ignore/add/remove/force"
    },
    "sp_after_oc_msg_receiver": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# (OC) Add or remove space between the receiver and selector in a message,\n# as in '[receiver selector ...]'.\n",
        "line": "sp_after_oc_msg_receiver        = ignore   # ignore/add/remove/force"
    },
    "sp_after_oc_property": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# (OC) Add or remove space after '@property'.\n",
        "line": "sp_after_oc_property            = ignore   # ignore/add/remove/force"
    },
    "sp_after_oc_synchronized": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# (OC) Add or remove space between '@synchronized' and the open parenthesis,\n# i.e. '@synchronized(foo)' vs. '@synchronized (foo)'.\n",
        "line": "sp_after_oc_synchronized        = ignore   # ignore/add/remove/force"
    },
    "sp_cond_colon": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space around the ':' in 'b ? t : f'.\n",
        "line": "sp_cond_colon                   = ignore   # ignore/add/remove/force"
    },
    "sp_cond_colon_before": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space before the ':' in 'b ? t : f'.\n#\n# Overrides sp_cond_colon.\n",
        "line": "sp_cond_colon_before            = ignore   # ignore/add/remove/force"
    },
    "sp_cond_colon_after": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space after the ':' in 'b ? t : f'.\n#\n# Overrides sp_cond_colon.\n",
        "line": "sp_cond_colon_after             = ignore   # ignore/add/remove/force"
    },
    "sp_cond_question": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space around the '?' in 'b ? t : f'.\n",
        "line": "sp_cond_question                = ignore   # ignore/add/remove/force"
    },
    "sp_cond_question_before": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space before the '?' in 'b ? t : f'.\n#\n# Overrides sp_cond_question.\n",
        "line": "sp_cond_question_before         = ignore   # ignore/add/remove/force"
    },
    "sp_cond_question_after": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space after the '?' in 'b ? t : f'.\n#\n# Overrides sp_cond_question.\n",
        "line": "sp_cond_question_after          = ignore   # ignore/add/remove/force"
    },
    "sp_cond_ternary_short": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# In the abbreviated ternary form '(a ?: b)', add or remove space between '?'\n# and ':'.\n#\n# Overrides all other sp_cond_* options.\n",
        "line": "sp_cond_ternary_short           = ignore   # ignore/add/remove/force"
    },
    "sp_case_label": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Fix the spacing between 'case' and the label. Only 'ignore' and 'force' make\n# sense here.\n",
        "line": "sp_case_label                   = ignore   # ignore/add/remove/force"
    },
    "sp_range": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# (D) Add or remove space around the D '..' operator.\n",
        "line": "sp_range                        = ignore   # ignore/add/remove/force"
    },
    "sp_after_for_colon": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space after ':' in a Java/C++11 range-based 'for',\n# as in 'for (Type var : expr)'.\n",
        "line": "sp_after_for_colon              = ignore   # ignore/add/remove/force"
    },
    "sp_before_for_colon": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space before ':' in a Java/C++11 range-based 'for',\n# as in 'for (Type var : expr)'.\n",
        "line": "sp_before_for_colon             = ignore   # ignore/add/remove/force"
    },
    "sp_extern_paren": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# (D) Add or remove space between 'extern' and '(' as in 'extern (C)'.\n",
        "line": "sp_extern_paren                 = ignore   # ignore/add/remove/force"
    },
    "sp_cmt_cpp_start": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space after the opening of a C++ comment,\n# i.e. '// A' vs. '//A'.\n",
        "line": "sp_cmt_cpp_start                = ignore   # ignore/add/remove/force"
    },
    "sp_cmt_cpp_doxygen": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# If true, space is added with sp_cmt_cpp_start will be added after doxygen\n# sequences like '///', '///<', '//!' and '//!<'.\n",
        "line": "sp_cmt_cpp_doxygen              = false    # true/false"
    },
    "sp_cmt_cpp_qttr": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# If true, space is added with sp_cmt_cpp_start will be added after Qt\n# translator or meta-data comments like '//:', '//=', and '//~'.\n",
        "line": "sp_cmt_cpp_qttr                 = false    # true/false"
    },
    "sp_endif_cmt": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space between #else or #endif and a trailing comment.\n",
        "line": "sp_endif_cmt                    = ignore   # ignore/add/remove/force"
    },
    "sp_after_new": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space after 'new', 'delete' and 'delete[]'.\n",
        "line": "sp_after_new                    = ignore   # ignore/add/remove/force"
    },
    "sp_between_new_paren": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space between 'new' and '(' in 'new()'.\n",
        "line": "sp_between_new_paren            = ignore   # ignore/add/remove/force"
    },
    "sp_after_newop_paren": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space between ')' and type in 'new(foo) BAR'.\n",
        "line": "sp_after_newop_paren            = ignore   # ignore/add/remove/force"
    },
    "sp_inside_newop_paren": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space inside parenthesis of the new operator\n# as in 'new(foo) BAR'.\n",
        "line": "sp_inside_newop_paren           = ignore   # ignore/add/remove/force"
    },
    "sp_inside_newop_paren_open": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space after the open parenthesis of the new operator,\n# as in 'new(foo) BAR'.\n#\n# Overrides sp_inside_newop_paren.\n",
        "line": "sp_inside_newop_paren_open      = ignore   # ignore/add/remove/force"
    },
    "sp_inside_newop_paren_close": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space before the close parenthesis of the new operator,\n# as in 'new(foo) BAR'.\n#\n# Overrides sp_inside_newop_paren.\n",
        "line": "sp_inside_newop_paren_close     = ignore   # ignore/add/remove/force"
    },
    "sp_before_tr_emb_cmt": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space before a trailing or embedded comment.\n",
        "line": "sp_before_tr_emb_cmt            = ignore   # ignore/add/remove/force"
    },
    "sp_num_before_tr_emb_cmt": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# Number of spaces before a trailing or embedded comment.\n",
        "line": "sp_num_before_tr_emb_cmt        = 0        # unsigned number"
    },
    "sp_annotation_paren": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# (Java) Add or remove space between an annotation and the open parenthesis.\n",
        "line": "sp_annotation_paren             = ignore   # ignore/add/remove/force"
    },
    "sp_skip_vbrace_tokens": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# If true, vbrace tokens are dropped to the previous token and skipped.\n",
        "line": "sp_skip_vbrace_tokens           = false    # true/false"
    },
    "sp_after_noexcept": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space after 'noexcept'.\n",
        "line": "sp_after_noexcept               = ignore   # ignore/add/remove/force"
    },
    "sp_vala_after_translation": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space after '_'.\n",
        "line": "sp_vala_after_translation       = ignore   # ignore/add/remove/force"
    },
    "force_tab_after_define": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# If true, a <TAB> is inserted after #define.\n",
        "line": "force_tab_after_define          = false    # true/false"
    },
    "indent_columns": {
        "value": 8,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# The number of columns to indent per level. Usually 2, 3, 4, or 8.\n#\n# Default: 8\n",
        "line": "indent_columns                  = 8        # unsigned number"
    },
    "indent_continue": {
        "value": 0,
        "type": "ParamType.INTEGER",
        "allowed": null,
        "doc": "# The continuation indent. If non-zero, this overrides the indent of '(', '['\n# and '=' continuation indents. Negative values are OK; negative value is\n# absolute and not increased for each '(' or '[' level.\n#\n# For FreeBSD, this is set to 4.\n",
        "line": "indent_continue                 = 0        # number"
    },
    "indent_continue_class_head": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# The continuation indent, only for class header line(s). If non-zero, this\n# overrides the indent of 'class' continuation indents.\n",
        "line": "indent_continue_class_head      = 0        # unsigned number"
    },
    "indent_single_newlines": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to indent empty lines (i.e. lines which contain only spaces before\n# the newline character).\n",
        "line": "indent_single_newlines          = false    # true/false"
    },
    "indent_param": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# The continuation indent for func_*_param if they are true. If non-zero, this\n# overrides the indent.\n",
        "line": "indent_param                    = 0        # unsigned number"
    },
    "indent_with_tabs": {
        "value": 1,
        "type": "ParamType.SET",
        "allowed": [
            "0",
            "1",
            "2"
        ],
        "doc": "# How to use tabs when indenting code.\n#\n# 0: Spaces only\n# 1: Indent with tabs to brace level, align with spaces (default)\n# 2: Indent and align with tabs, using spaces when not on a tabstop\n#\n# Default: 1\n",
        "line": "indent_with_tabs                = 1        # unsigned number"
    },
    "indent_cmt_with_tabs": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to indent comments that are not at a brace level with tabs on a\n# tabstop. Requires indent_with_tabs=2. If false, will use spaces.\n",
        "line": "indent_cmt_with_tabs            = false    # true/false"
    },
    "indent_align_string": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to indent strings broken by '\\' so that they line up.\n",
        "line": "indent_align_string             = false    # true/false"
    },
    "indent_xml_string": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# The number of spaces to indent multi-line XML strings.\n# Requires indent_align_string=true.\n",
        "line": "indent_xml_string               = 0        # unsigned number"
    },
    "indent_brace": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# Spaces to indent '{' from level.\n",
        "line": "indent_brace                    = 0        # unsigned number"
    },
    "indent_braces": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether braces are indented to the body level.\n",
        "line": "indent_braces                   = false    # true/false"
    },
    "indent_braces_no_func": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to disable indenting function braces if indent_braces=true.\n",
        "line": "indent_braces_no_func           = false    # true/false"
    },
    "indent_braces_no_class": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to disable indenting class braces if indent_braces=true.\n",
        "line": "indent_braces_no_class          = false    # true/false"
    },
    "indent_braces_no_struct": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to disable indenting struct braces if indent_braces=true.\n",
        "line": "indent_braces_no_struct         = false    # true/false"
    },
    "indent_brace_parent": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to indent based on the size of the brace parent,\n# i.e. 'if' => 3 spaces, 'for' => 4 spaces, etc.\n",
        "line": "indent_brace_parent             = false    # true/false"
    },
    "indent_paren_open_brace": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to indent based on the open parenthesis instead of the open brace\n# in '({\\n'.\n",
        "line": "indent_paren_open_brace         = false    # true/false"
    },
    "indent_cs_delegate_brace": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# (C#) Whether to indent the brace of a C# delegate by another level.\n",
        "line": "indent_cs_delegate_brace        = false    # true/false"
    },
    "indent_cs_delegate_body": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# (C#) Whether to indent a C# delegate (to handle delegates with no brace) by\n# another level.\n",
        "line": "indent_cs_delegate_body         = false    # true/false"
    },
    "indent_namespace": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to indent the body of a 'namespace'.\n",
        "line": "indent_namespace                = false    # true/false"
    },
    "indent_namespace_single_indent": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to indent only the first namespace, and not any nested namespaces.\n# Requires indent_namespace=true.\n",
        "line": "indent_namespace_single_indent  = false    # true/false"
    },
    "indent_namespace_level": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# The number of spaces to indent a namespace block.\n# If set to zero, use the value indent_columns\n",
        "line": "indent_namespace_level          = 0        # unsigned number"
    },
    "indent_namespace_limit": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# If the body of the namespace is longer than this number, it won't be\n# indented. Requires indent_namespace=true. 0 means no limit.\n",
        "line": "indent_namespace_limit          = 0        # unsigned number"
    },
    "indent_extern": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether the 'extern \"C\"' body is indented.\n",
        "line": "indent_extern                   = false    # true/false"
    },
    "indent_class": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether the 'class' body is indented.\n",
        "line": "indent_class                    = false    # true/false"
    },
    "indent_class_colon": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to indent the stuff after a leading base class colon.\n",
        "line": "indent_class_colon              = false    # true/false"
    },
    "indent_class_on_colon": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to indent based on a class colon instead of the stuff after the\n# colon. Requires indent_class_colon=true.\n",
        "line": "indent_class_on_colon           = false    # true/false"
    },
    "indent_constr_colon": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to indent the stuff after a leading class initializer colon.\n",
        "line": "indent_constr_colon             = false    # true/false"
    },
    "indent_ctor_init_leading": {
        "value": 2,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# Virtual indent from the ':' for member initializers.\n#\n# Default: 2\n",
        "line": "indent_ctor_init_leading        = 2        # unsigned number"
    },
    "indent_ctor_init": {
        "value": 0,
        "type": "ParamType.INTEGER",
        "allowed": null,
        "doc": "# Additional indent for constructor initializer list.\n# Negative values decrease indent down to the first column.\n",
        "line": "indent_ctor_init                = 0        # number"
    },
    "indent_else_if": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to indent 'if' following 'else' as a new block under the 'else'.\n# If false, 'else\\nif' is treated as 'else if' for indenting purposes.\n",
        "line": "indent_else_if                  = false    # true/false"
    },
    "indent_var_def_blk": {
        "value": 0,
        "type": "ParamType.INTEGER",
        "allowed": null,
        "doc": "# Amount to indent variable declarations after a open brace.\n#\n#  <0: Relative\n# >=0: Absolute\n",
        "line": "indent_var_def_blk              = 0        # number"
    },
    "indent_var_def_cont": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to indent continued variable declarations instead of aligning.\n",
        "line": "indent_var_def_cont             = false    # true/false"
    },
    "indent_shift": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to indent continued shift expressions ('<<' and '>>') instead of\n# aligning. Set align_left_shift=false when enabling this.\n",
        "line": "indent_shift                    = false    # true/false"
    },
    "indent_func_def_force_col1": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to force indentation of function definitions to start in column 1.\n",
        "line": "indent_func_def_force_col1      = false    # true/false"
    },
    "indent_func_call_param": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to indent continued function call parameters one indent level,\n# rather than aligning parameters under the open parenthesis.\n",
        "line": "indent_func_call_param          = false    # true/false"
    },
    "indent_func_def_param": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Same as indent_func_call_param, but for function definitions.\n",
        "line": "indent_func_def_param           = false    # true/false"
    },
    "indent_func_proto_param": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Same as indent_func_call_param, but for function prototypes.\n",
        "line": "indent_func_proto_param         = false    # true/false"
    },
    "indent_func_class_param": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Same as indent_func_call_param, but for class declarations.\n",
        "line": "indent_func_class_param         = false    # true/false"
    },
    "indent_func_ctor_var_param": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Same as indent_func_call_param, but for class variable constructors.\n",
        "line": "indent_func_ctor_var_param      = false    # true/false"
    },
    "indent_template_param": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Same as indent_func_call_param, but for template parameter lists.\n",
        "line": "indent_template_param           = false    # true/false"
    },
    "indent_func_param_double": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Double the indent for indent_func_xxx_param options.\n# Use both values of the options indent_columns and indent_param.\n",
        "line": "indent_func_param_double        = false    # true/false"
    },
    "indent_func_const": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# Indentation column for standalone 'const' qualifier on a function\n# prototype.\n",
        "line": "indent_func_const               = 0        # unsigned number"
    },
    "indent_func_throw": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# Indentation column for standalone 'throw' qualifier on a function\n# prototype.\n",
        "line": "indent_func_throw               = 0        # unsigned number"
    },
    "indent_member": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# The number of spaces to indent a continued '->' or '.'.\n# Usually set to 0, 1, or indent_columns.\n",
        "line": "indent_member                   = 0        # unsigned number"
    },
    "indent_member_single": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether lines broken at '.' or '->' should be indented by a single indent.\n# The indent_member option will not be effective if this is set to true.\n",
        "line": "indent_member_single            = false    # true/false"
    },
    "indent_sing_line_comments": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# Spaces to indent single line ('//') comments on lines before code.\n",
        "line": "indent_sing_line_comments       = 0        # unsigned number"
    },
    "indent_relative_single_line_comments": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to indent trailing single line ('//') comments relative to the code\n# instead of trying to keep the same absolute column.\n",
        "line": "indent_relative_single_line_comments = false    # true/false"
    },
    "indent_switch_case": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# Spaces to indent 'case' from 'switch'. Usually 0 or indent_columns.\n",
        "line": "indent_switch_case              = 0        # unsigned number"
    },
    "indent_switch_pp": {
        "value": "true",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to indent preprocessor statements inside of switch statements.\n#\n# Default: true\n",
        "line": "indent_switch_pp                = true     # true/false"
    },
    "indent_case_shift": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# Spaces to shift the 'case' line, without affecting any other lines.\n# Usually 0.\n",
        "line": "indent_case_shift               = 0        # unsigned number"
    },
    "indent_case_brace": {
        "value": 0,
        "type": "ParamType.INTEGER",
        "allowed": null,
        "doc": "# Spaces to indent '{' from 'case'. By default, the brace will appear under\n# the 'c' in case. Usually set to 0 or indent_columns. Negative values are OK.\n",
        "line": "indent_case_brace               = 0        # number"
    },
    "indent_col1_comment": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to indent comments found in first column.\n",
        "line": "indent_col1_comment             = false    # true/false"
    },
    "indent_col1_multi_string_literal": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to indent multi string literal in first column.\n",
        "line": "indent_col1_multi_string_literal = false    # true/false"
    },
    "indent_label": {
        "value": 1,
        "type": "ParamType.INTEGER",
        "allowed": null,
        "doc": "# How to indent goto labels.\n#\n#  >0: Absolute column where 1 is the leftmost column\n# <=0: Subtract from brace indent\n#\n# Default: 1\n",
        "line": "indent_label                    = 1        # number"
    },
    "indent_access_spec": {
        "value": 1,
        "type": "ParamType.INTEGER",
        "allowed": null,
        "doc": "# Same as indent_label, but for access specifiers that are followed by a\n# colon.\n#\n# Default: 1\n",
        "line": "indent_access_spec              = 1        # number"
    },
    "indent_access_spec_body": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to indent the code after an access specifier by one level.\n# If true, this option forces 'indent_access_spec=0'.\n",
        "line": "indent_access_spec_body         = false    # true/false"
    },
    "indent_paren_nl": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# If an open parenthesis is followed by a newline, whether to indent the next\n# line so that it lines up after the open parenthesis (not recommended).\n",
        "line": "indent_paren_nl                 = false    # true/false"
    },
    "indent_paren_close": {
        "value": 0,
        "type": "ParamType.SET",
        "allowed": [
            "0",
            "1",
            "2"
        ],
        "doc": "# How to indent a close parenthesis after a newline.\n#\n# 0: Indent to body level (default)\n# 1: Align under the open parenthesis\n# 2: Indent to the brace level\n",
        "line": "indent_paren_close              = 0        # unsigned number"
    },
    "indent_paren_after_func_def": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to indent the open parenthesis of a function definition,\n# if the parenthesis is on its own line.\n",
        "line": "indent_paren_after_func_def     = false    # true/false"
    },
    "indent_paren_after_func_decl": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to indent the open parenthesis of a function declaration,\n# if the parenthesis is on its own line.\n",
        "line": "indent_paren_after_func_decl    = false    # true/false"
    },
    "indent_paren_after_func_call": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to indent the open parenthesis of a function call,\n# if the parenthesis is on its own line.\n",
        "line": "indent_paren_after_func_call    = false    # true/false"
    },
    "indent_comma_paren": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to indent a comma when inside a parenthesis.\n# If true, aligns under the open parenthesis.\n",
        "line": "indent_comma_paren              = false    # true/false"
    },
    "indent_bool_paren": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to indent a Boolean operator when inside a parenthesis.\n# If true, aligns under the open parenthesis.\n",
        "line": "indent_bool_paren               = false    # true/false"
    },
    "indent_semicolon_for_paren": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to indent a semicolon when inside a for parenthesis.\n# If true, aligns under the open for parenthesis.\n",
        "line": "indent_semicolon_for_paren      = false    # true/false"
    },
    "indent_first_bool_expr": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to align the first expression to following ones\n# if indent_bool_paren=true.\n",
        "line": "indent_first_bool_expr          = false    # true/false"
    },
    "indent_first_for_expr": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to align the first expression to following ones\n# if indent_semicolon_for_paren=true.\n",
        "line": "indent_first_for_expr           = false    # true/false"
    },
    "indent_square_nl": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# If an open square is followed by a newline, whether to indent the next line\n# so that it lines up after the open square (not recommended).\n",
        "line": "indent_square_nl                = false    # true/false"
    },
    "indent_preserve_sql": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# (ESQL/C) Whether to preserve the relative indent of 'EXEC SQL' bodies.\n",
        "line": "indent_preserve_sql             = false    # true/false"
    },
    "indent_align_assign": {
        "value": "true",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to align continued statements at the '='. If false or if the '=' is\n# followed by a newline, the next line is indent one tab.\n#\n# Default: true\n",
        "line": "indent_align_assign             = true     # true/false"
    },
    "indent_align_paren": {
        "value": "true",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to align continued statements at the '('. If false or the '(' is\n# followed by a newline, the next line indent is one tab.\n#\n# Default: true\n",
        "line": "indent_align_paren              = true     # true/false"
    },
    "indent_oc_block": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# (OC) Whether to indent Objective-C blocks at brace level instead of usual\n# rules.\n",
        "line": "indent_oc_block                 = false    # true/false"
    },
    "indent_oc_block_msg": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# (OC) Indent for Objective-C blocks in a message relative to the parameter\n# name.\n#\n# =0: Use indent_oc_block rules\n# >0: Use specified number of spaces to indent\n",
        "line": "indent_oc_block_msg             = 0        # unsigned number"
    },
    "indent_oc_msg_colon": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# (OC) Minimum indent for subsequent parameters\n",
        "line": "indent_oc_msg_colon             = 0        # unsigned number"
    },
    "indent_oc_msg_prioritize_first_colon": {
        "value": "true",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# (OC) Whether to prioritize aligning with initial colon (and stripping spaces\n# from lines, if necessary).\n#\n# Default: true\n",
        "line": "indent_oc_msg_prioritize_first_colon = true     # true/false"
    },
    "indent_oc_block_msg_xcode_style": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# (OC) Whether to indent blocks the way that Xcode does by default\n# (from the keyword if the parameter is on its own line; otherwise, from the\n# previous indentation level). Requires indent_oc_block_msg=true.\n",
        "line": "indent_oc_block_msg_xcode_style = false    # true/false"
    },
    "indent_oc_block_msg_from_keyword": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# (OC) Whether to indent blocks from where the brace is, relative to a\n# message keyword. Requires indent_oc_block_msg=true.\n",
        "line": "indent_oc_block_msg_from_keyword = false    # true/false"
    },
    "indent_oc_block_msg_from_colon": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# (OC) Whether to indent blocks from where the brace is, relative to a message\n# colon. Requires indent_oc_block_msg=true.\n",
        "line": "indent_oc_block_msg_from_colon  = false    # true/false"
    },
    "indent_oc_block_msg_from_caret": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# (OC) Whether to indent blocks from where the block caret is.\n# Requires indent_oc_block_msg=true.\n",
        "line": "indent_oc_block_msg_from_caret  = false    # true/false"
    },
    "indent_oc_block_msg_from_brace": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# (OC) Whether to indent blocks from where the brace caret is.\n# Requires indent_oc_block_msg=true.\n",
        "line": "indent_oc_block_msg_from_brace  = false    # true/false"
    },
    "indent_min_vbrace_open": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# When indenting after virtual brace open and newline add further spaces to\n# reach this minimum indent.\n",
        "line": "indent_min_vbrace_open          = 0        # unsigned number"
    },
    "indent_vbrace_open_on_tabstop": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to add further spaces after regular indent to reach next tabstop\n# when identing after virtual brace open and newline.\n",
        "line": "indent_vbrace_open_on_tabstop   = false    # true/false"
    },
    "indent_token_after_brace": {
        "value": "true",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# How to indent after a brace followed by another token (not a newline).\n# true:  indent all contained lines to match the token\n# false: indent all contained lines to match the brace\n#\n# Default: true\n",
        "line": "indent_token_after_brace        = true     # true/false"
    },
    "indent_cpp_lambda_body": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to indent the body of a C++11 lambda.\n",
        "line": "indent_cpp_lambda_body          = false    # true/false"
    },
    "indent_using_block": {
        "value": "true",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# (C#) Whether to indent a 'using' block if no braces are used.\n#\n# Default: true\n",
        "line": "indent_using_block              = true     # true/false"
    },
    "indent_ternary_operator": {
        "value": 0,
        "type": "ParamType.SET",
        "allowed": [
            "0",
            "1",
            "2"
        ],
        "doc": "# How to indent the continuation of ternary operator.\n#\n# 0: Off (default)\n# 1: When the `if_false` is a continuation, indent it under `if_false`\n# 2: When the `:` is a continuation, indent it under `?`\n",
        "line": "indent_ternary_operator         = 0        # unsigned number"
    },
    "indent_off_after_return_new": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# If true, the indentation of the chunks after a `return new` sequence will be set at return indentation column.\n",
        "line": "indent_off_after_return_new     = false    # true/false"
    },
    "indent_single_after_return": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# If true, the tokens after return are indented with regular single indentation. By default (false) the indentation is after the return token.\n",
        "line": "indent_single_after_return      = false    # true/false"
    },
    "indent_ignore_asm_block": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to ignore indent and alignment for 'asm' blocks (i.e. assume they\n# have their own indentation).\n",
        "line": "indent_ignore_asm_block         = false    # true/false"
    },
    "nl_collapse_empty_body": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to collapse empty blocks between '{' and '}'.\n",
        "line": "nl_collapse_empty_body          = false    # true/false"
    },
    "nl_assign_leave_one_liners": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Don't split one-line braced assignments, as in 'foo_t f = { 1, 2 };'.\n",
        "line": "nl_assign_leave_one_liners      = false    # true/false"
    },
    "nl_class_leave_one_liners": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Don't split one-line braced statements inside a 'class xx { }' body.\n",
        "line": "nl_class_leave_one_liners       = false    # true/false"
    },
    "nl_enum_leave_one_liners": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Don't split one-line enums, as in 'enum foo { BAR = 15 };'\n",
        "line": "nl_enum_leave_one_liners        = false    # true/false"
    },
    "nl_getset_leave_one_liners": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Don't split one-line get or set functions.\n",
        "line": "nl_getset_leave_one_liners      = false    # true/false"
    },
    "nl_cs_property_leave_one_liners": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# (C#) Don't split one-line property get or set functions.\n",
        "line": "nl_cs_property_leave_one_liners = false    # true/false"
    },
    "nl_func_leave_one_liners": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Don't split one-line function definitions, as in 'int foo() { return 0; }'.\n",
        "line": "nl_func_leave_one_liners        = false    # true/false"
    },
    "nl_cpp_lambda_leave_one_liners": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Don't split one-line C++11 lambdas, as in '[]() { return 0; }'.\n",
        "line": "nl_cpp_lambda_leave_one_liners  = false    # true/false"
    },
    "nl_if_leave_one_liners": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Don't split one-line if/else statements, as in 'if(...) b++;'.\n",
        "line": "nl_if_leave_one_liners          = false    # true/false"
    },
    "nl_while_leave_one_liners": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Don't split one-line while statements, as in 'while(...) b++;'.\n",
        "line": "nl_while_leave_one_liners       = false    # true/false"
    },
    "nl_for_leave_one_liners": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Don't split one-line for statements, as in 'for(...) b++;'.\n",
        "line": "nl_for_leave_one_liners         = false    # true/false"
    },
    "nl_oc_msg_leave_one_liner": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# (OC) Don't split one-line Objective-C messages.\n",
        "line": "nl_oc_msg_leave_one_liner       = false    # true/false"
    },
    "nl_oc_mdef_brace": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# (OC) Add or remove newline between method declaration and '{'.\n",
        "line": "nl_oc_mdef_brace                = ignore   # ignore/add/remove/force"
    },
    "nl_oc_block_brace": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# (OC) Add or remove newline between Objective-C block signature and '{'.\n",
        "line": "nl_oc_block_brace               = ignore   # ignore/add/remove/force"
    },
    "nl_oc_interface_brace": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# (OC) Add or remove newline between '@interface' and '{'.\n",
        "line": "nl_oc_interface_brace           = ignore   # ignore/add/remove/force"
    },
    "nl_oc_implementation_brace": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# (OC) Add or remove newline between '@implementation' and '{'.\n",
        "line": "nl_oc_implementation_brace      = ignore   # ignore/add/remove/force"
    },
    "nl_start_of_file": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove newlines at the start of the file.\n",
        "line": "nl_start_of_file                = ignore   # ignore/add/remove/force"
    },
    "nl_start_of_file_min": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# The minimum number of newlines at the start of the file (only used if\n# nl_start_of_file is 'add' or 'force').\n",
        "line": "nl_start_of_file_min            = 0        # unsigned number"
    },
    "nl_end_of_file": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove newline at the end of the file.\n",
        "line": "nl_end_of_file                  = ignore   # ignore/add/remove/force"
    },
    "nl_end_of_file_min": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# The minimum number of newlines at the end of the file (only used if\n# nl_end_of_file is 'add' or 'force').\n",
        "line": "nl_end_of_file_min              = 0        # unsigned number"
    },
    "nl_assign_brace": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove newline between '=' and '{'.\n",
        "line": "nl_assign_brace                 = ignore   # ignore/add/remove/force"
    },
    "nl_assign_square": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# (D) Add or remove newline between '=' and '['.\n",
        "line": "nl_assign_square                = ignore   # ignore/add/remove/force"
    },
    "nl_tsquare_brace": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove newline between '[]' and '{'.\n",
        "line": "nl_tsquare_brace                = ignore   # ignore/add/remove/force"
    },
    "nl_after_square_assign": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# (D) Add or remove newline after '= ['. Will also affect the newline before\n# the ']'.\n",
        "line": "nl_after_square_assign          = ignore   # ignore/add/remove/force"
    },
    "nl_fcall_brace": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove newline between a function call's ')' and '{', as in\n# 'list_for_each(item, &list) { }'.\n",
        "line": "nl_fcall_brace                  = ignore   # ignore/add/remove/force"
    },
    "nl_enum_brace": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove newline between 'enum' and '{'.\n",
        "line": "nl_enum_brace                   = ignore   # ignore/add/remove/force"
    },
    "nl_enum_class": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove newline between 'enum' and 'class'.\n",
        "line": "nl_enum_class                   = ignore   # ignore/add/remove/force"
    },
    "nl_enum_class_identifier": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove newline between 'enum class' and the identifier.\n",
        "line": "nl_enum_class_identifier        = ignore   # ignore/add/remove/force"
    },
    "nl_enum_identifier_colon": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove newline between 'enum class' type and ':'.\n",
        "line": "nl_enum_identifier_colon        = ignore   # ignore/add/remove/force"
    },
    "nl_enum_colon_type": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove newline between 'enum class identifier :' and type.\n",
        "line": "nl_enum_colon_type              = ignore   # ignore/add/remove/force"
    },
    "nl_struct_brace": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove newline between 'struct and '{'.\n",
        "line": "nl_struct_brace                 = ignore   # ignore/add/remove/force"
    },
    "nl_union_brace": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove newline between 'union' and '{'.\n",
        "line": "nl_union_brace                  = ignore   # ignore/add/remove/force"
    },
    "nl_if_brace": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove newline between 'if' and '{'.\n",
        "line": "nl_if_brace                     = ignore   # ignore/add/remove/force"
    },
    "nl_brace_else": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove newline between '}' and 'else'.\n",
        "line": "nl_brace_else                   = ignore   # ignore/add/remove/force"
    },
    "nl_elseif_brace": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove newline between 'else if' and '{'. If set to ignore,\n# nl_if_brace is used instead.\n",
        "line": "nl_elseif_brace                 = ignore   # ignore/add/remove/force"
    },
    "nl_else_brace": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove newline between 'else' and '{'.\n",
        "line": "nl_else_brace                   = ignore   # ignore/add/remove/force"
    },
    "nl_else_if": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove newline between 'else' and 'if'.\n",
        "line": "nl_else_if                      = ignore   # ignore/add/remove/force"
    },
    "nl_before_if_closing_paren": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove newline before 'if'/'else if' closing parenthesis.\n",
        "line": "nl_before_if_closing_paren      = ignore   # ignore/add/remove/force"
    },
    "nl_brace_finally": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove newline between '}' and 'finally'.\n",
        "line": "nl_brace_finally                = ignore   # ignore/add/remove/force"
    },
    "nl_finally_brace": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove newline between 'finally' and '{'.\n",
        "line": "nl_finally_brace                = ignore   # ignore/add/remove/force"
    },
    "nl_try_brace": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove newline between 'try' and '{'.\n",
        "line": "nl_try_brace                    = ignore   # ignore/add/remove/force"
    },
    "nl_getset_brace": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove newline between get/set and '{'.\n",
        "line": "nl_getset_brace                 = ignore   # ignore/add/remove/force"
    },
    "nl_for_brace": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove newline between 'for' and '{'.\n",
        "line": "nl_for_brace                    = ignore   # ignore/add/remove/force"
    },
    "nl_catch_brace": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove newline before the '{' of a 'catch' statement, as in\n# 'catch (decl) <here> {'.\n",
        "line": "nl_catch_brace                  = ignore   # ignore/add/remove/force"
    },
    "nl_oc_catch_brace": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# (OC) Add or remove newline before the '{' of a '@catch' statement, as in\n# '@catch (decl) <here> {'. If set to ignore, nl_catch_brace is used.\n",
        "line": "nl_oc_catch_brace               = ignore   # ignore/add/remove/force"
    },
    "nl_brace_catch": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove newline between '}' and 'catch'.\n",
        "line": "nl_brace_catch                  = ignore   # ignore/add/remove/force"
    },
    "nl_oc_brace_catch": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# (OC) Add or remove newline between '}' and '@catch'. If set to ignore,\n# nl_brace_catch is used.\n",
        "line": "nl_oc_brace_catch               = ignore   # ignore/add/remove/force"
    },
    "nl_brace_square": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove newline between '}' and ']'.\n",
        "line": "nl_brace_square                 = ignore   # ignore/add/remove/force"
    },
    "nl_brace_fparen": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove newline between '}' and ')' in a function invocation.\n",
        "line": "nl_brace_fparen                 = ignore   # ignore/add/remove/force"
    },
    "nl_while_brace": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove newline between 'while' and '{'.\n",
        "line": "nl_while_brace                  = ignore   # ignore/add/remove/force"
    },
    "nl_scope_brace": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# (D) Add or remove newline between 'scope (x)' and '{'.\n",
        "line": "nl_scope_brace                  = ignore   # ignore/add/remove/force"
    },
    "nl_unittest_brace": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# (D) Add or remove newline between 'unittest' and '{'.\n",
        "line": "nl_unittest_brace               = ignore   # ignore/add/remove/force"
    },
    "nl_version_brace": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# (D) Add or remove newline between 'version (x)' and '{'.\n",
        "line": "nl_version_brace                = ignore   # ignore/add/remove/force"
    },
    "nl_using_brace": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# (C#) Add or remove newline between 'using' and '{'.\n",
        "line": "nl_using_brace                  = ignore   # ignore/add/remove/force"
    },
    "nl_brace_brace": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove newline between two open or close braces. Due to general\n# newline/brace handling, REMOVE may not work.\n",
        "line": "nl_brace_brace                  = ignore   # ignore/add/remove/force"
    },
    "nl_do_brace": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove newline between 'do' and '{'.\n",
        "line": "nl_do_brace                     = ignore   # ignore/add/remove/force"
    },
    "nl_brace_while": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove newline between '}' and 'while' of 'do' statement.\n",
        "line": "nl_brace_while                  = ignore   # ignore/add/remove/force"
    },
    "nl_switch_brace": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove newline between 'switch' and '{'.\n",
        "line": "nl_switch_brace                 = ignore   # ignore/add/remove/force"
    },
    "nl_synchronized_brace": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove newline between 'synchronized' and '{'.\n",
        "line": "nl_synchronized_brace           = ignore   # ignore/add/remove/force"
    },
    "nl_multi_line_cond": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Add a newline between ')' and '{' if the ')' is on a different line than the\n# if/for/etc.\n#\n# Overrides nl_for_brace, nl_if_brace, nl_switch_brace, nl_while_switch and\n# nl_catch_brace.\n",
        "line": "nl_multi_line_cond              = false    # true/false"
    },
    "nl_multi_line_define": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Force a newline in a define after the macro name for multi-line defines.\n",
        "line": "nl_multi_line_define            = false    # true/false"
    },
    "nl_before_case": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to add a newline before 'case', and a blank line before a 'case'\n# statement that follows a ';' or '}'.\n",
        "line": "nl_before_case                  = false    # true/false"
    },
    "nl_after_case": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to add a newline after a 'case' statement.\n",
        "line": "nl_after_case                   = false    # true/false"
    },
    "nl_case_colon_brace": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove newline between a case ':' and '{'.\n#\n# Overrides nl_after_case.\n",
        "line": "nl_case_colon_brace             = ignore   # ignore/add/remove/force"
    },
    "nl_before_throw": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove newline between ')' and 'throw'.\n",
        "line": "nl_before_throw                 = ignore   # ignore/add/remove/force"
    },
    "nl_namespace_brace": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove newline between 'namespace' and '{'.\n",
        "line": "nl_namespace_brace              = ignore   # ignore/add/remove/force"
    },
    "nl_template_class": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove newline between 'template<>' and whatever follows.\n",
        "line": "nl_template_class               = ignore   # ignore/add/remove/force"
    },
    "nl_class_brace": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove newline between 'class' and '{'.\n",
        "line": "nl_class_brace                  = ignore   # ignore/add/remove/force"
    },
    "nl_class_init_args": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove newline before or after (depending on pos_class_comma,\n# may not be IGNORE) each',' in the base class list.\n",
        "line": "nl_class_init_args              = ignore   # ignore/add/remove/force"
    },
    "nl_constr_init_args": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove newline after each ',' in the constructor member\n# initialization. Related to nl_constr_colon, pos_constr_colon and\n# pos_constr_comma.\n",
        "line": "nl_constr_init_args             = ignore   # ignore/add/remove/force"
    },
    "nl_enum_own_lines": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove newline before first element, after comma, and after last\n# element, in 'enum'.\n",
        "line": "nl_enum_own_lines               = ignore   # ignore/add/remove/force"
    },
    "nl_func_type_name": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove newline between return type and function name in a function\n# definition.\n",
        "line": "nl_func_type_name               = ignore   # ignore/add/remove/force"
    },
    "nl_func_type_name_class": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove newline between return type and function name inside a class\n# definition. If set to ignore, nl_func_type_name or nl_func_proto_type_name\n# is used instead.\n",
        "line": "nl_func_type_name_class         = ignore   # ignore/add/remove/force"
    },
    "nl_func_class_scope": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove newline between class specification and '::'\n# in 'void A::f() { }'. Only appears in separate member implementation (does\n# not appear with in-line implementation).\n",
        "line": "nl_func_class_scope             = ignore   # ignore/add/remove/force"
    },
    "nl_func_scope_name": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove newline between function scope and name, as in\n# 'void A :: <here> f() { }'.\n",
        "line": "nl_func_scope_name              = ignore   # ignore/add/remove/force"
    },
    "nl_func_proto_type_name": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove newline between return type and function name in a prototype.\n",
        "line": "nl_func_proto_type_name         = ignore   # ignore/add/remove/force"
    },
    "nl_func_paren": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove newline between a function name and the opening '(' in the\n# declaration.\n",
        "line": "nl_func_paren                   = ignore   # ignore/add/remove/force"
    },
    "nl_func_paren_empty": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Overrides nl_func_paren for functions with no parameters.\n",
        "line": "nl_func_paren_empty             = ignore   # ignore/add/remove/force"
    },
    "nl_func_def_paren": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove newline between a function name and the opening '(' in the\n# definition.\n",
        "line": "nl_func_def_paren               = ignore   # ignore/add/remove/force"
    },
    "nl_func_def_paren_empty": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Overrides nl_func_def_paren for functions with no parameters.\n",
        "line": "nl_func_def_paren_empty         = ignore   # ignore/add/remove/force"
    },
    "nl_func_call_paren": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove newline between a function name and the opening '(' in the\n# call.\n",
        "line": "nl_func_call_paren              = ignore   # ignore/add/remove/force"
    },
    "nl_func_call_paren_empty": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Overrides nl_func_call_paren for functions with no parameters.\n",
        "line": "nl_func_call_paren_empty        = ignore   # ignore/add/remove/force"
    },
    "nl_func_decl_start": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove newline after '(' in a function declaration.\n",
        "line": "nl_func_decl_start              = ignore   # ignore/add/remove/force"
    },
    "nl_func_def_start": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove newline after '(' in a function definition.\n",
        "line": "nl_func_def_start               = ignore   # ignore/add/remove/force"
    },
    "nl_func_decl_start_single": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Overrides nl_func_decl_start when there is only one parameter.\n",
        "line": "nl_func_decl_start_single       = ignore   # ignore/add/remove/force"
    },
    "nl_func_def_start_single": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Overrides nl_func_def_start when there is only one parameter.\n",
        "line": "nl_func_def_start_single        = ignore   # ignore/add/remove/force"
    },
    "nl_func_decl_start_multi_line": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to add a newline after '(' in a function declaration if '(' and ')'\n# are in different lines. If false, nl_func_decl_start is used instead.\n",
        "line": "nl_func_decl_start_multi_line   = false    # true/false"
    },
    "nl_func_def_start_multi_line": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to add a newline after '(' in a function definition if '(' and ')'\n# are in different lines. If false, nl_func_def_start is used instead.\n",
        "line": "nl_func_def_start_multi_line    = false    # true/false"
    },
    "nl_func_decl_args": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove newline after each ',' in a function declaration.\n",
        "line": "nl_func_decl_args               = ignore   # ignore/add/remove/force"
    },
    "nl_func_def_args": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove newline after each ',' in a function definition.\n",
        "line": "nl_func_def_args                = ignore   # ignore/add/remove/force"
    },
    "nl_func_decl_args_multi_line": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to add a newline after each ',' in a function declaration if '('\n# and ')' are in different lines. If false, nl_func_decl_args is used instead.\n",
        "line": "nl_func_decl_args_multi_line    = false    # true/false"
    },
    "nl_func_def_args_multi_line": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to add a newline after each ',' in a function definition if '('\n# and ')' are in different lines. If false, nl_func_def_args is used instead.\n",
        "line": "nl_func_def_args_multi_line     = false    # true/false"
    },
    "nl_func_decl_end": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove newline before the ')' in a function declaration.\n",
        "line": "nl_func_decl_end                = ignore   # ignore/add/remove/force"
    },
    "nl_func_def_end": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove newline before the ')' in a function definition.\n",
        "line": "nl_func_def_end                 = ignore   # ignore/add/remove/force"
    },
    "nl_func_decl_end_single": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Overrides nl_func_decl_end when there is only one parameter.\n",
        "line": "nl_func_decl_end_single         = ignore   # ignore/add/remove/force"
    },
    "nl_func_def_end_single": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Overrides nl_func_def_end when there is only one parameter.\n",
        "line": "nl_func_def_end_single          = ignore   # ignore/add/remove/force"
    },
    "nl_func_decl_end_multi_line": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to add a newline before ')' in a function declaration if '(' and ')'\n# are in different lines. If false, nl_func_decl_end is used instead.\n",
        "line": "nl_func_decl_end_multi_line     = false    # true/false"
    },
    "nl_func_def_end_multi_line": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to add a newline before ')' in a function definition if '(' and ')'\n# are in different lines. If false, nl_func_def_end is used instead.\n",
        "line": "nl_func_def_end_multi_line      = false    # true/false"
    },
    "nl_func_decl_empty": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove newline between '()' in a function declaration.\n",
        "line": "nl_func_decl_empty              = ignore   # ignore/add/remove/force"
    },
    "nl_func_def_empty": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove newline between '()' in a function definition.\n",
        "line": "nl_func_def_empty               = ignore   # ignore/add/remove/force"
    },
    "nl_func_call_empty": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove newline between '()' in a function call.\n",
        "line": "nl_func_call_empty              = ignore   # ignore/add/remove/force"
    },
    "nl_func_call_start": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Whether to add a newline after '(' in a function call,\n# has preference over nl_func_call_start_multi_line.\n",
        "line": "nl_func_call_start              = ignore   # ignore/add/remove/force"
    },
    "nl_func_call_start_multi_line": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to add a newline after '(' in a function call if '(' and ')' are in\n# different lines.\n",
        "line": "nl_func_call_start_multi_line   = false    # true/false"
    },
    "nl_func_call_args_multi_line": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to add a newline after each ',' in a function call if '(' and ')'\n# are in different lines.\n",
        "line": "nl_func_call_args_multi_line    = false    # true/false"
    },
    "nl_func_call_end_multi_line": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to add a newline before ')' in a function call if '(' and ')' are in\n# different lines.\n",
        "line": "nl_func_call_end_multi_line     = false    # true/false"
    },
    "nl_oc_msg_args": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# (OC) Whether to put each Objective-C message parameter on a separate line.\n# See nl_oc_msg_leave_one_liner.\n",
        "line": "nl_oc_msg_args                  = false    # true/false"
    },
    "nl_fdef_brace": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove newline between function signature and '{'.\n",
        "line": "nl_fdef_brace                   = ignore   # ignore/add/remove/force"
    },
    "nl_fdef_brace_cond": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove newline between function signature and '{',\n# if signature ends with ')'. Overrides nl_fdef_brace.\n",
        "line": "nl_fdef_brace_cond              = ignore   # ignore/add/remove/force"
    },
    "nl_cpp_ldef_brace": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove newline between C++11 lambda signature and '{'.\n",
        "line": "nl_cpp_ldef_brace               = ignore   # ignore/add/remove/force"
    },
    "nl_return_expr": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove newline between 'return' and the return expression.\n",
        "line": "nl_return_expr                  = ignore   # ignore/add/remove/force"
    },
    "nl_after_semicolon": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to add a newline after semicolons, except in 'for' statements.\n",
        "line": "nl_after_semicolon              = false    # true/false"
    },
    "nl_paren_dbrace_open": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# (Java) Add or remove newline between the ')' and '{{' of the double brace\n# initializer.\n",
        "line": "nl_paren_dbrace_open            = ignore   # ignore/add/remove/force"
    },
    "nl_type_brace_init_lst": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Whether to add a newline after the type in an unnamed temporary\n# direct-list-initialization.\n",
        "line": "nl_type_brace_init_lst          = ignore   # ignore/add/remove/force"
    },
    "nl_type_brace_init_lst_open": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Whether to add a newline after the open brace in an unnamed temporary\n# direct-list-initialization.\n",
        "line": "nl_type_brace_init_lst_open     = ignore   # ignore/add/remove/force"
    },
    "nl_type_brace_init_lst_close": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Whether to add a newline before the close brace in an unnamed temporary\n# direct-list-initialization.\n",
        "line": "nl_type_brace_init_lst_close    = ignore   # ignore/add/remove/force"
    },
    "nl_after_brace_open": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to add a newline after '{'. This also adds a newline before the\n# matching '}'.\n",
        "line": "nl_after_brace_open             = false    # true/false"
    },
    "nl_after_brace_open_cmt": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to add a newline between the open brace and a trailing single-line\n# comment. Requires nl_after_brace_open=true.\n",
        "line": "nl_after_brace_open_cmt         = false    # true/false"
    },
    "nl_after_vbrace_open": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to add a newline after a virtual brace open with a non-empty body.\n# These occur in un-braced if/while/do/for statement bodies.\n",
        "line": "nl_after_vbrace_open            = false    # true/false"
    },
    "nl_after_vbrace_open_empty": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to add a newline after a virtual brace open with an empty body.\n# These occur in un-braced if/while/do/for statement bodies.\n",
        "line": "nl_after_vbrace_open_empty      = false    # true/false"
    },
    "nl_after_brace_close": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to add a newline after '}'. Does not apply if followed by a\n# necessary ';'.\n",
        "line": "nl_after_brace_close            = false    # true/false"
    },
    "nl_after_vbrace_close": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to add a newline after a virtual brace close,\n# as in 'if (foo) a++; <here> return;'.\n",
        "line": "nl_after_vbrace_close           = false    # true/false"
    },
    "nl_brace_struct_var": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove newline between the close brace and identifier,\n# as in 'struct { int a; } <here> b;'. Affects enumerations, unions and\n# structures. If set to ignore, uses nl_after_brace_close.\n",
        "line": "nl_brace_struct_var             = ignore   # ignore/add/remove/force"
    },
    "nl_define_macro": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to alter newlines in '#define' macros.\n",
        "line": "nl_define_macro                 = false    # true/false"
    },
    "nl_squeeze_paren_close": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to alter newlines between consecutive parenthesis closes. The number\n# of closing parentheses in a line will depend on respective open parenthesis\n# lines.\n",
        "line": "nl_squeeze_paren_close          = false    # true/false"
    },
    "nl_squeeze_ifdef": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to remove blanks after '#ifxx' and '#elxx', or before '#elxx' and\n# '#endif'. Does not affect top-level #ifdefs.\n",
        "line": "nl_squeeze_ifdef                = false    # true/false"
    },
    "nl_squeeze_ifdef_top_level": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Makes the nl_squeeze_ifdef option affect the top-level #ifdefs as well.\n",
        "line": "nl_squeeze_ifdef_top_level      = false    # true/false"
    },
    "nl_before_if": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove blank line before 'if'.\n",
        "line": "nl_before_if                    = ignore   # ignore/add/remove/force"
    },
    "nl_after_if": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove blank line after 'if' statement. Add/Force work only if the\n# next token is not a closing brace.\n",
        "line": "nl_after_if                     = ignore   # ignore/add/remove/force"
    },
    "nl_before_for": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove blank line before 'for'.\n",
        "line": "nl_before_for                   = ignore   # ignore/add/remove/force"
    },
    "nl_after_for": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove blank line after 'for' statement.\n",
        "line": "nl_after_for                    = ignore   # ignore/add/remove/force"
    },
    "nl_before_while": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove blank line before 'while'.\n",
        "line": "nl_before_while                 = ignore   # ignore/add/remove/force"
    },
    "nl_after_while": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove blank line after 'while' statement.\n",
        "line": "nl_after_while                  = ignore   # ignore/add/remove/force"
    },
    "nl_before_switch": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove blank line before 'switch'.\n",
        "line": "nl_before_switch                = ignore   # ignore/add/remove/force"
    },
    "nl_after_switch": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove blank line after 'switch' statement.\n",
        "line": "nl_after_switch                 = ignore   # ignore/add/remove/force"
    },
    "nl_before_synchronized": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove blank line before 'synchronized'.\n",
        "line": "nl_before_synchronized          = ignore   # ignore/add/remove/force"
    },
    "nl_after_synchronized": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove blank line after 'synchronized' statement.\n",
        "line": "nl_after_synchronized           = ignore   # ignore/add/remove/force"
    },
    "nl_before_do": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove blank line before 'do'.\n",
        "line": "nl_before_do                    = ignore   # ignore/add/remove/force"
    },
    "nl_after_do": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove blank line after 'do/while' statement.\n",
        "line": "nl_after_do                     = ignore   # ignore/add/remove/force"
    },
    "nl_before_return": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to put a blank line before 'return' statements, unless after an open\n# brace.\n",
        "line": "nl_before_return                = false    # true/false"
    },
    "nl_after_return": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to put a blank line after 'return' statements, unless followed by a\n# close brace.\n",
        "line": "nl_after_return                 = false    # true/false"
    },
    "nl_ds_struct_enum_cmt": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to double-space commented-entries in 'struct'/'union'/'enum'.\n",
        "line": "nl_ds_struct_enum_cmt           = false    # true/false"
    },
    "nl_ds_struct_enum_close_brace": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to force a newline before '}' of a 'struct'/'union'/'enum'.\n# (Lower priority than eat_blanks_before_close_brace.)\n",
        "line": "nl_ds_struct_enum_close_brace   = false    # true/false"
    },
    "nl_class_colon": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove newline before or after (depending on pos_class_colon) a class\n# colon, as in 'class Foo <here> : <or here> public Bar'.\n",
        "line": "nl_class_colon                  = ignore   # ignore/add/remove/force"
    },
    "nl_constr_colon": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove newline around a class constructor colon. The exact position\n# depends on nl_constr_init_args, pos_constr_colon and pos_constr_comma.\n",
        "line": "nl_constr_colon                 = ignore   # ignore/add/remove/force"
    },
    "nl_namespace_two_to_one_liner": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to collapse a two-line namespace, like 'namespace foo\\n{ decl; }'\n# into a single line. If true, prevents other brace newline rules from turning\n# such code into four lines.\n",
        "line": "nl_namespace_two_to_one_liner   = false    # true/false"
    },
    "nl_create_if_one_liner": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to remove a newline in simple unbraced if statements, turning them\n# into one-liners, as in 'if(b)\\n i++;' => 'if(b) i++;'.\n",
        "line": "nl_create_if_one_liner          = false    # true/false"
    },
    "nl_create_for_one_liner": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to remove a newline in simple unbraced for statements, turning them\n# into one-liners, as in 'for (...)\\n stmt;' => 'for (...) stmt;'.\n",
        "line": "nl_create_for_one_liner         = false    # true/false"
    },
    "nl_create_while_one_liner": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to remove a newline in simple unbraced while statements, turning\n# them into one-liners, as in 'while (expr)\\n stmt;' => 'while (expr) stmt;'.\n",
        "line": "nl_create_while_one_liner       = false    # true/false"
    },
    "nl_create_func_def_one_liner": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to collapse a function definition whose body (not counting braces)\n# is only one line so that the entire definition (prototype, braces, body) is\n# a single line.\n",
        "line": "nl_create_func_def_one_liner    = false    # true/false"
    },
    "nl_split_if_one_liner": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to split one-line simple unbraced if statements into two lines by\n# adding a newline, as in 'if(b) <here> i++;'.\n",
        "line": "nl_split_if_one_liner           = false    # true/false"
    },
    "nl_split_for_one_liner": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to split one-line simple unbraced for statements into two lines by\n# adding a newline, as in 'for (...) <here> stmt;'.\n",
        "line": "nl_split_for_one_liner          = false    # true/false"
    },
    "nl_split_while_one_liner": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to split one-line simple unbraced while statements into two lines by\n# adding a newline, as in 'while (expr) <here> stmt;'.\n",
        "line": "nl_split_while_one_liner        = false    # true/false"
    },
    "nl_max": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# The maximum number of consecutive newlines (3 = 2 blank lines).\n",
        "line": "nl_max                          = 0        # unsigned number"
    },
    "nl_max_blank_in_func": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# The maximum number of consecutive newlines in a function.\n",
        "line": "nl_max_blank_in_func            = 0        # unsigned number"
    },
    "nl_before_func_body_proto": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# The number of newlines before a function prototype.\n",
        "line": "nl_before_func_body_proto       = 0        # unsigned number"
    },
    "nl_before_func_body_def": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# The number of newlines before a multi-line function definition.\n",
        "line": "nl_before_func_body_def         = 0        # unsigned number"
    },
    "nl_before_func_class_proto": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# The number of newlines before a class constructor/destructor prototype.\n",
        "line": "nl_before_func_class_proto      = 0        # unsigned number"
    },
    "nl_before_func_class_def": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# The number of newlines before a class constructor/destructor definition.\n",
        "line": "nl_before_func_class_def        = 0        # unsigned number"
    },
    "nl_after_func_proto": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# The number of newlines after a function prototype.\n",
        "line": "nl_after_func_proto             = 0        # unsigned number"
    },
    "nl_after_func_proto_group": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# The number of newlines after a function prototype, if not followed by\n# another function prototype.\n",
        "line": "nl_after_func_proto_group       = 0        # unsigned number"
    },
    "nl_after_func_class_proto": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# The number of newlines after a class constructor/destructor prototype.\n",
        "line": "nl_after_func_class_proto       = 0        # unsigned number"
    },
    "nl_after_func_class_proto_group": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# The number of newlines after a class constructor/destructor prototype,\n# if not followed by another constructor/destructor prototype.\n",
        "line": "nl_after_func_class_proto_group = 0        # unsigned number"
    },
    "nl_class_leave_one_liner_groups": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether one-line method definitions inside a class body should be treated\n# as if they were prototypes for the purposes of adding newlines.\n#\n# Requires nl_class_leave_one_liners=true. Overrides nl_before_func_body_def\n# and nl_before_func_class_def for one-liners.\n",
        "line": "nl_class_leave_one_liner_groups = false    # true/false"
    },
    "nl_after_func_body": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# The number of newlines after '}' of a multi-line function body.\n",
        "line": "nl_after_func_body              = 0        # unsigned number"
    },
    "nl_after_func_body_class": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# The number of newlines after '}' of a multi-line function body in a class\n# declaration. Also affects class constructors/destructors.\n#\n# Overrides nl_after_func_body.\n",
        "line": "nl_after_func_body_class        = 0        # unsigned number"
    },
    "nl_after_func_body_one_liner": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# The number of newlines after '}' of a single line function body. Also\n# affects class constructors/destructors.\n#\n# Overrides nl_after_func_body and nl_after_func_body_class.\n",
        "line": "nl_after_func_body_one_liner    = 0        # unsigned number"
    },
    "nl_func_var_def_blk": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# The number of blank lines after a block of variable definitions at the top\n# of a function body.\n#\n# 0 = No change (default).\n",
        "line": "nl_func_var_def_blk             = 0        # unsigned number"
    },
    "nl_typedef_blk_start": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# The number of newlines before a block of typedefs. If nl_after_access_spec\n# is non-zero, that option takes precedence.\n#\n# 0 = No change (default).\n",
        "line": "nl_typedef_blk_start            = 0        # unsigned number"
    },
    "nl_typedef_blk_end": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# The number of newlines after a block of typedefs.\n#\n# 0 = No change (default).\n",
        "line": "nl_typedef_blk_end              = 0        # unsigned number"
    },
    "nl_typedef_blk_in": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# The maximum number of consecutive newlines within a block of typedefs.\n#\n# 0 = No change (default).\n",
        "line": "nl_typedef_blk_in               = 0        # unsigned number"
    },
    "nl_var_def_blk_start": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# The number of newlines before a block of variable definitions not at the top\n# of a function body. If nl_after_access_spec is non-zero, that option takes\n# precedence.\n#\n# 0 = No change (default).\n",
        "line": "nl_var_def_blk_start            = 0        # unsigned number"
    },
    "nl_var_def_blk_end": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# The number of newlines after a block of variable definitions not at the top\n# of a function body.\n#\n# 0 = No change (default).\n",
        "line": "nl_var_def_blk_end              = 0        # unsigned number"
    },
    "nl_var_def_blk_in": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# The maximum number of consecutive newlines within a block of variable\n# definitions.\n#\n# 0 = No change (default).\n",
        "line": "nl_var_def_blk_in               = 0        # unsigned number"
    },
    "nl_before_block_comment": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# The minimum number of newlines before a multi-line comment.\n# Doesn't apply if after a brace open or another multi-line comment.\n",
        "line": "nl_before_block_comment         = 0        # unsigned number"
    },
    "nl_before_c_comment": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# The minimum number of newlines before a single-line C comment.\n# Doesn't apply if after a brace open or other single-line C comments.\n",
        "line": "nl_before_c_comment             = 0        # unsigned number"
    },
    "nl_before_cpp_comment": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# The minimum number of newlines before a CPP comment.\n# Doesn't apply if after a brace open or other CPP comments.\n",
        "line": "nl_before_cpp_comment           = 0        # unsigned number"
    },
    "nl_after_multiline_comment": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to force a newline after a multi-line comment.\n",
        "line": "nl_after_multiline_comment      = false    # true/false"
    },
    "nl_after_label_colon": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to force a newline after a label's colon.\n",
        "line": "nl_after_label_colon            = false    # true/false"
    },
    "nl_after_struct": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# The number of newlines after '}' or ';' of a struct/enum/union definition.\n",
        "line": "nl_after_struct                 = 0        # unsigned number"
    },
    "nl_before_class": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# The number of newlines before a class definition.\n",
        "line": "nl_before_class                 = 0        # unsigned number"
    },
    "nl_after_class": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# The number of newlines after '}' or ';' of a class definition.\n",
        "line": "nl_after_class                  = 0        # unsigned number"
    },
    "nl_before_access_spec": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# The number of newlines before an access specifier label. This also includes\n# the Qt-specific 'signals:' and 'slots:'. Will not change the newline count\n# if after a brace open.\n#\n# 0 = No change (default).\n",
        "line": "nl_before_access_spec           = 0        # unsigned number"
    },
    "nl_after_access_spec": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# The number of newlines after an access specifier label. This also includes\n# the Qt-specific 'signals:' and 'slots:'. Will not change the newline count\n# if after a brace open.\n#\n# 0 = No change (default).\n#\n# Overrides nl_typedef_blk_start and nl_var_def_blk_start.\n",
        "line": "nl_after_access_spec            = 0        # unsigned number"
    },
    "nl_comment_func_def": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# The number of newlines between a function definition and the function\n# comment, as in '// comment\\n <here> void foo() {...}'.\n#\n# 0 = No change (default).\n",
        "line": "nl_comment_func_def             = 0        # unsigned number"
    },
    "nl_after_try_catch_finally": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# The number of newlines after a try-catch-finally block that isn't followed\n# by a brace close.\n#\n# 0 = No change (default).\n",
        "line": "nl_after_try_catch_finally      = 0        # unsigned number"
    },
    "nl_around_cs_property": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# (C#) The number of newlines before and after a property, indexer or event\n# declaration.\n#\n# 0 = No change (default).\n",
        "line": "nl_around_cs_property           = 0        # unsigned number"
    },
    "nl_between_get_set": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# (C#) The number of newlines between the get/set/add/remove handlers.\n#\n# 0 = No change (default).\n",
        "line": "nl_between_get_set              = 0        # unsigned number"
    },
    "nl_property_brace": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# (C#) Add or remove newline between property and the '{'.\n",
        "line": "nl_property_brace               = ignore   # ignore/add/remove/force"
    },
    "nl_inside_namespace": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# The number of newlines after '{' of a namespace. This also adds newlines\n# before the matching '}'.\n#\n# 0 = Apply eat_blanks_after_open_brace or eat_blanks_before_close_brace if\n#     applicable, otherwise no change.\n#\n# Overrides eat_blanks_after_open_brace and eat_blanks_before_close_brace.\n",
        "line": "nl_inside_namespace             = 0        # unsigned number"
    },
    "eat_blanks_after_open_brace": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to remove blank lines after '{'.\n",
        "line": "eat_blanks_after_open_brace     = false    # true/false"
    },
    "eat_blanks_before_close_brace": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to remove blank lines before '}'.\n",
        "line": "eat_blanks_before_close_brace   = false    # true/false"
    },
    "nl_remove_extra_newlines": {
        "value": 0,
        "type": "ParamType.SET",
        "allowed": [
            "0",
            "1",
            "2"
        ],
        "doc": "# How aggressively to remove extra newlines not in preprocessor.\n#\n# 0: No change (default)\n# 1: Remove most newlines not handled by other config\n# 2: Remove all newlines and reformat completely by config\n",
        "line": "nl_remove_extra_newlines        = 0        # unsigned number"
    },
    "nl_after_annotation": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# (Java) Add or remove newline after an annotation statement. Only affects\n# annotations that are after a newline.\n",
        "line": "nl_after_annotation             = ignore   # ignore/add/remove/force"
    },
    "nl_between_annotation": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# (Java) Add or remove newline between two annotations.\n",
        "line": "nl_between_annotation           = ignore   # ignore/add/remove/force"
    },
    "pos_arith": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "break",
            "force",
            "lead",
            "trail",
            "join",
            "lead_break",
            "lead_force",
            "trail_break",
            "trail_force"
        ],
        "doc": "# The position of arithmetic operators in wrapped expressions.\n",
        "line": "pos_arith                       = ignore   # ignore/break/force/lead/trail/join/lead_break/lead_force/trail_break/trail_force"
    },
    "pos_assign": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "break",
            "force",
            "lead",
            "trail",
            "join",
            "lead_break",
            "lead_force",
            "trail_break",
            "trail_force"
        ],
        "doc": "# The position of assignment in wrapped expressions. Do not affect '='\n# followed by '{'.\n",
        "line": "pos_assign                      = ignore   # ignore/break/force/lead/trail/join/lead_break/lead_force/trail_break/trail_force"
    },
    "pos_bool": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "break",
            "force",
            "lead",
            "trail",
            "join",
            "lead_break",
            "lead_force",
            "trail_break",
            "trail_force"
        ],
        "doc": "# The position of Boolean operators in wrapped expressions.\n",
        "line": "pos_bool                        = ignore   # ignore/break/force/lead/trail/join/lead_break/lead_force/trail_break/trail_force"
    },
    "pos_compare": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "break",
            "force",
            "lead",
            "trail",
            "join",
            "lead_break",
            "lead_force",
            "trail_break",
            "trail_force"
        ],
        "doc": "# The position of comparison operators in wrapped expressions.\n",
        "line": "pos_compare                     = ignore   # ignore/break/force/lead/trail/join/lead_break/lead_force/trail_break/trail_force"
    },
    "pos_conditional": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "break",
            "force",
            "lead",
            "trail",
            "join",
            "lead_break",
            "lead_force",
            "trail_break",
            "trail_force"
        ],
        "doc": "# The position of conditional operators, as in the '?' and ':' of\n# 'expr ? stmt : stmt', in wrapped expressions.\n",
        "line": "pos_conditional                 = ignore   # ignore/break/force/lead/trail/join/lead_break/lead_force/trail_break/trail_force"
    },
    "pos_comma": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "break",
            "force",
            "lead",
            "trail",
            "join",
            "lead_break",
            "lead_force",
            "trail_break",
            "trail_force"
        ],
        "doc": "# The position of the comma in wrapped expressions.\n",
        "line": "pos_comma                       = ignore   # ignore/break/force/lead/trail/join/lead_break/lead_force/trail_break/trail_force"
    },
    "pos_enum_comma": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "break",
            "force",
            "lead",
            "trail",
            "join",
            "lead_break",
            "lead_force",
            "trail_break",
            "trail_force"
        ],
        "doc": "# The position of the comma in enum entries.\n",
        "line": "pos_enum_comma                  = ignore   # ignore/break/force/lead/trail/join/lead_break/lead_force/trail_break/trail_force"
    },
    "pos_class_comma": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "break",
            "force",
            "lead",
            "trail",
            "join",
            "lead_break",
            "lead_force",
            "trail_break",
            "trail_force"
        ],
        "doc": "# The position of the comma in the base class list if there is more than one\n# line. Affects nl_class_init_args.\n",
        "line": "pos_class_comma                 = ignore   # ignore/break/force/lead/trail/join/lead_break/lead_force/trail_break/trail_force"
    },
    "pos_constr_comma": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "break",
            "force",
            "lead",
            "trail",
            "join",
            "lead_break",
            "lead_force",
            "trail_break",
            "trail_force"
        ],
        "doc": "# The position of the comma in the constructor initialization list.\n# Related to nl_constr_colon, nl_constr_init_args and pos_constr_colon.\n",
        "line": "pos_constr_comma                = ignore   # ignore/break/force/lead/trail/join/lead_break/lead_force/trail_break/trail_force"
    },
    "pos_class_colon": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "break",
            "force",
            "lead",
            "trail",
            "join",
            "lead_break",
            "lead_force",
            "trail_break",
            "trail_force"
        ],
        "doc": "# The position of trailing/leading class colon, between class and base class\n# list. Affects nl_class_colon.\n",
        "line": "pos_class_colon                 = ignore   # ignore/break/force/lead/trail/join/lead_break/lead_force/trail_break/trail_force"
    },
    "pos_constr_colon": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "break",
            "force",
            "lead",
            "trail",
            "join",
            "lead_break",
            "lead_force",
            "trail_break",
            "trail_force"
        ],
        "doc": "# The position of colons between constructor and member initialization.\n# Related to nl_constr_colon, nl_constr_init_args and pos_constr_comma.\n",
        "line": "pos_constr_colon                = ignore   # ignore/break/force/lead/trail/join/lead_break/lead_force/trail_break/trail_force"
    },
    "code_width": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# Try to limit code width to N columns.\n",
        "line": "code_width                      = 0        # unsigned number"
    },
    "ls_for_split_full": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to fully split long 'for' statements at semi-colons.\n",
        "line": "ls_for_split_full               = false    # true/false"
    },
    "ls_func_split_full": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to fully split long function prototypes/calls at commas.\n# The option ls_code_width has priority over the option ls_func_split_full.\n",
        "line": "ls_func_split_full              = false    # true/false"
    },
    "ls_code_width": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to split lines as close to code_width as possible and ignore some\n# groupings.\n# The option ls_code_width has priority over the option ls_func_split_full.\n",
        "line": "ls_code_width                   = false    # true/false"
    },
    "align_keep_tabs": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to keep non-indenting tabs.\n",
        "line": "align_keep_tabs                 = false    # true/false"
    },
    "align_with_tabs": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to use tabs for aligning.\n",
        "line": "align_with_tabs                 = false    # true/false"
    },
    "align_on_tabstop": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to bump out to the next tab when aligning.\n",
        "line": "align_on_tabstop                = false    # true/false"
    },
    "align_number_right": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to right-align numbers.\n",
        "line": "align_number_right              = false    # true/false"
    },
    "align_keep_extra_space": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to keep whitespace not required for alignment.\n",
        "line": "align_keep_extra_space          = false    # true/false"
    },
    "align_func_params": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to align variable definitions in prototypes and functions.\n",
        "line": "align_func_params               = false    # true/false"
    },
    "align_func_params_span": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# The span for aligning parameter definitions in function on parameter name.\n#\n# 0 = Don't align (default).\n",
        "line": "align_func_params_span          = 0        # unsigned number"
    },
    "align_func_params_thresh": {
        "value": 0,
        "type": "ParamType.INTEGER",
        "allowed": null,
        "doc": "# The threshold for aligning function parameter definitions.\n# Use a negative number for absolute thresholds.\n#\n# 0 = No limit (default).\n",
        "line": "align_func_params_thresh        = 0        # number"
    },
    "align_func_params_gap": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# The gap for aligning function parameter definitions.\n",
        "line": "align_func_params_gap           = 0        # unsigned number"
    },
    "align_constr_value_span": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# The span for aligning constructor value.\n#\n# 0 = Don't align (default).\n",
        "line": "align_constr_value_span         = 0        # unsigned number"
    },
    "align_constr_value_thresh": {
        "value": 0,
        "type": "ParamType.INTEGER",
        "allowed": null,
        "doc": "# The threshold for aligning constructor value.\n# Use a negative number for absolute thresholds.\n#\n# 0 = No limit (default).\n",
        "line": "align_constr_value_thresh       = 0        # number"
    },
    "align_constr_value_gap": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# The gap for aligning constructor value.\n",
        "line": "align_constr_value_gap          = 0        # unsigned number"
    },
    "align_same_func_call_params": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to align parameters in single-line functions that have the same\n# name. The function names must already be aligned with each other.\n",
        "line": "align_same_func_call_params     = false    # true/false"
    },
    "align_same_func_call_params_span": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# The span for aligning function-call parameters for single line functions.\n#\n# 0 = Don't align (default).\n",
        "line": "align_same_func_call_params_span = 0        # unsigned number"
    },
    "align_same_func_call_params_thresh": {
        "value": 0,
        "type": "ParamType.INTEGER",
        "allowed": null,
        "doc": "# The threshold for aligning function-call parameters for single line\n# functions.\n# Use a negative number for absolute thresholds.\n#\n# 0 = No limit (default).\n",
        "line": "align_same_func_call_params_thresh = 0        # number"
    },
    "align_var_def_span": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# The span for aligning variable definitions.\n#\n# 0 = Don't align (default).\n",
        "line": "align_var_def_span              = 0        # unsigned number"
    },
    "align_var_def_star_style": {
        "value": 0,
        "type": "ParamType.SET",
        "allowed": [
            "0",
            "1",
            "2"
        ],
        "doc": "# How to consider (or treat) the '*' in the alignment of variable definitions.\n#\n# 0: Part of the type     'void *   foo;' (default)\n# 1: Part of the variable 'void     *foo;'\n# 2: Dangling             'void    *foo;'\n# Dangling: the '*' will not be taken into account when aligning.\n",
        "line": "align_var_def_star_style        = 0        # unsigned number"
    },
    "align_var_def_amp_style": {
        "value": 0,
        "type": "ParamType.SET",
        "allowed": [
            "0",
            "1",
            "2"
        ],
        "doc": "# How to consider (or treat) the '&' in the alignment of variable definitions.\n#\n# 0: Part of the type     'long &   foo;' (default)\n# 1: Part of the variable 'long     &foo;'\n# 2: Dangling             'long    &foo;'\n# Dangling: the '&' will not be taken into account when aligning.\n",
        "line": "align_var_def_amp_style         = 0        # unsigned number"
    },
    "align_var_def_thresh": {
        "value": 0,
        "type": "ParamType.INTEGER",
        "allowed": null,
        "doc": "# The threshold for aligning variable definitions.\n# Use a negative number for absolute thresholds.\n#\n# 0 = No limit (default).\n",
        "line": "align_var_def_thresh            = 0        # number"
    },
    "align_var_def_gap": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# The gap for aligning variable definitions.\n",
        "line": "align_var_def_gap               = 0        # unsigned number"
    },
    "align_var_def_colon": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to align the colon in struct bit fields.\n",
        "line": "align_var_def_colon             = false    # true/false"
    },
    "align_var_def_colon_gap": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# The gap for aligning the colon in struct bit fields.\n",
        "line": "align_var_def_colon_gap         = 0        # unsigned number"
    },
    "align_var_def_attribute": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to align any attribute after the variable name.\n",
        "line": "align_var_def_attribute         = false    # true/false"
    },
    "align_var_def_inline": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to align inline struct/enum/union variable definitions.\n",
        "line": "align_var_def_inline            = false    # true/false"
    },
    "align_assign_span": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# The span for aligning on '=' in assignments.\n#\n# 0 = Don't align (default).\n",
        "line": "align_assign_span               = 0        # unsigned number"
    },
    "align_assign_func_proto_span": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# The span for aligning on '=' in function prototype modifier.\n#\n# 0 = Don't align (default).\n",
        "line": "align_assign_func_proto_span    = 0        # unsigned number"
    },
    "align_assign_thresh": {
        "value": 0,
        "type": "ParamType.INTEGER",
        "allowed": null,
        "doc": "# The threshold for aligning on '=' in assignments.\n# Use a negative number for absolute thresholds.\n#\n# 0 = No limit (default).\n",
        "line": "align_assign_thresh             = 0        # number"
    },
    "align_assign_decl_func": {
        "value": 0,
        "type": "ParamType.SET",
        "allowed": [
            "0",
            "1",
            "2"
        ],
        "doc": "# How to apply align_assign_span to function declaration \"assignments\", i.e.\n# 'virtual void foo() = 0' or '~foo() = {default|delete}'.\n#\n# 0: Align with other assignments (default)\n# 1: Align with each other, ignoring regular assignments\n# 2: Don't align\n",
        "line": "align_assign_decl_func          = 0        # unsigned number"
    },
    "align_enum_equ_span": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# The span for aligning on '=' in enums.\n#\n# 0 = Don't align (default).\n",
        "line": "align_enum_equ_span             = 0        # unsigned number"
    },
    "align_enum_equ_thresh": {
        "value": 0,
        "type": "ParamType.INTEGER",
        "allowed": null,
        "doc": "# The threshold for aligning on '=' in enums.\n# Use a negative number for absolute thresholds.\n#\n# 0 = no limit (default).\n",
        "line": "align_enum_equ_thresh           = 0        # number"
    },
    "align_var_class_span": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# The span for aligning class member definitions.\n#\n# 0 = Don't align (default).\n",
        "line": "align_var_class_span            = 0        # unsigned number"
    },
    "align_var_class_thresh": {
        "value": 0,
        "type": "ParamType.INTEGER",
        "allowed": null,
        "doc": "# The threshold for aligning class member definitions.\n# Use a negative number for absolute thresholds.\n#\n# 0 = No limit (default).\n",
        "line": "align_var_class_thresh          = 0        # number"
    },
    "align_var_class_gap": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# The gap for aligning class member definitions.\n",
        "line": "align_var_class_gap             = 0        # unsigned number"
    },
    "align_var_struct_span": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# The span for aligning struct/union member definitions.\n#\n# 0 = Don't align (default).\n",
        "line": "align_var_struct_span           = 0        # unsigned number"
    },
    "align_var_struct_thresh": {
        "value": 0,
        "type": "ParamType.INTEGER",
        "allowed": null,
        "doc": "# The threshold for aligning struct/union member definitions.\n# Use a negative number for absolute thresholds.\n#\n# 0 = No limit (default).\n",
        "line": "align_var_struct_thresh         = 0        # number"
    },
    "align_var_struct_gap": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# The gap for aligning struct/union member definitions.\n",
        "line": "align_var_struct_gap            = 0        # unsigned number"
    },
    "align_struct_init_span": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# The span for aligning struct initializer values.\n#\n# 0 = Don't align (default).\n",
        "line": "align_struct_init_span          = 0        # unsigned number"
    },
    "align_typedef_span": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# The span for aligning single-line typedefs.\n#\n# 0 = Don't align (default).\n",
        "line": "align_typedef_span              = 0        # unsigned number"
    },
    "align_typedef_gap": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# The minimum space between the type and the synonym of a typedef.\n",
        "line": "align_typedef_gap               = 0        # unsigned number"
    },
    "align_typedef_func": {
        "value": 0,
        "type": "ParamType.SET",
        "allowed": [
            "0",
            "1",
            "2"
        ],
        "doc": "# How to align typedef'd functions with other typedefs.\n#\n# 0: Don't mix them at all (default)\n# 1: Align the open parenthesis with the types\n# 2: Align the function type name with the other type names\n",
        "line": "align_typedef_func              = 0        # unsigned number"
    },
    "align_typedef_star_style": {
        "value": 0,
        "type": "ParamType.SET",
        "allowed": [
            "0",
            "1",
            "2"
        ],
        "doc": "# How to consider (or treat) the '*' in the alignment of typedefs.\n#\n# 0: Part of the typedef type, 'typedef int * pint;' (default)\n# 1: Part of type name:        'typedef int   *pint;'\n# 2: Dangling:                 'typedef int  *pint;'\n# Dangling: the '*' will not be taken into account when aligning.\n",
        "line": "align_typedef_star_style        = 0        # unsigned number"
    },
    "align_typedef_amp_style": {
        "value": 0,
        "type": "ParamType.SET",
        "allowed": [
            "0",
            "1",
            "2"
        ],
        "doc": "# How to consider (or treat) the '&' in the alignment of typedefs.\n#\n# 0: Part of the typedef type, 'typedef int & intref;' (default)\n# 1: Part of type name:        'typedef int   &intref;'\n# 2: Dangling:                 'typedef int  &intref;'\n# Dangling: the '&' will not be taken into account when aligning.\n",
        "line": "align_typedef_amp_style         = 0        # unsigned number"
    },
    "align_right_cmt_span": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# The span for aligning comments that end lines.\n#\n# 0 = Don't align (default).\n",
        "line": "align_right_cmt_span            = 0        # unsigned number"
    },
    "align_right_cmt_gap": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# Minimum number of columns between preceding text and a trailing comment in\n# order for the comment to qualify for being aligned. Must be non-zero to have\n# an effect.\n",
        "line": "align_right_cmt_gap             = 0        # unsigned number"
    },
    "align_right_cmt_mix": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# If aligning comments, whether to mix with comments after '}' and #endif with\n# less than three spaces before the comment.\n",
        "line": "align_right_cmt_mix             = false    # true/false"
    },
    "align_right_cmt_same_level": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to only align trailing comments that are at the same brace level.\n",
        "line": "align_right_cmt_same_level      = false    # true/false"
    },
    "align_right_cmt_at_col": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# Minimum column at which to align trailing comments. Comments which are\n# aligned beyond this column, but which can be aligned in a lesser column,\n# may be \"pulled in\".\n#\n# 0 = Ignore (default).\n",
        "line": "align_right_cmt_at_col          = 0        # unsigned number"
    },
    "align_func_proto_span": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# The span for aligning function prototypes.\n#\n# 0 = Don't align (default).\n",
        "line": "align_func_proto_span           = 0        # unsigned number"
    },
    "align_func_proto_thresh": {
        "value": 0,
        "type": "ParamType.INTEGER",
        "allowed": null,
        "doc": "# The threshold for aligning function prototypes.\n# Use a negative number for absolute thresholds.\n#\n# 0 = No limit (default).\n",
        "line": "align_func_proto_thresh         = 0        # number"
    },
    "align_func_proto_gap": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# Minimum gap between the return type and the function name.\n",
        "line": "align_func_proto_gap            = 0        # unsigned number"
    },
    "align_on_operator": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to align function prototypes on the 'operator' keyword instead of\n# what follows.\n",
        "line": "align_on_operator               = false    # true/false"
    },
    "align_mix_var_proto": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to mix aligning prototype and variable declarations. If true,\n# align_var_def_XXX options are used instead of align_func_proto_XXX options.\n",
        "line": "align_mix_var_proto             = false    # true/false"
    },
    "align_single_line_func": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to align single-line functions with function prototypes.\n# Uses align_func_proto_span.\n",
        "line": "align_single_line_func          = false    # true/false"
    },
    "align_single_line_brace": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to align the open brace of single-line functions.\n# Requires align_single_line_func=true. Uses align_func_proto_span.\n",
        "line": "align_single_line_brace         = false    # true/false"
    },
    "align_single_line_brace_gap": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# Gap for align_single_line_brace.\n",
        "line": "align_single_line_brace_gap     = 0        # unsigned number"
    },
    "align_oc_msg_spec_span": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# (OC) The span for aligning Objective-C message specifications.\n#\n# 0 = Don't align (default).\n",
        "line": "align_oc_msg_spec_span          = 0        # unsigned number"
    },
    "align_nl_cont": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to align macros wrapped with a backslash and a newline. This will\n# not work right if the macro contains a multi-line comment.\n",
        "line": "align_nl_cont                   = false    # true/false"
    },
    "align_pp_define_together": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to align macro functions and variables together.\n",
        "line": "align_pp_define_together        = false    # true/false"
    },
    "align_pp_define_span": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# The span for aligning on '#define' bodies.\n#\n# =0: Don't align (default)\n# >0: Number of lines (including comments) between blocks\n",
        "line": "align_pp_define_span            = 0        # unsigned number"
    },
    "align_pp_define_gap": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# The minimum space between label and value of a preprocessor define.\n",
        "line": "align_pp_define_gap             = 0        # unsigned number"
    },
    "align_left_shift": {
        "value": "true",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to align lines that start with '<<' with previous '<<'.\n#\n# Default: true\n",
        "line": "align_left_shift                = true     # true/false"
    },
    "align_asm_colon": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to align text after 'asm volatile ()' colons.\n",
        "line": "align_asm_colon                 = false    # true/false"
    },
    "align_oc_msg_colon_span": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# (OC) Span for aligning parameters in an Objective-C message call\n# on the ':'.\n#\n# 0 = Don't align.\n",
        "line": "align_oc_msg_colon_span         = 0        # unsigned number"
    },
    "align_oc_msg_colon_first": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# (OC) Whether to always align with the first parameter, even if it is too\n# short.\n",
        "line": "align_oc_msg_colon_first        = false    # true/false"
    },
    "align_oc_decl_colon": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# (OC) Whether to align parameters in an Objective-C '+' or '-' declaration\n# on the ':'.\n",
        "line": "align_oc_decl_colon             = false    # true/false"
    },
    "cmt_width": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# Try to wrap comments at N columns.\n",
        "line": "cmt_width                       = 0        # unsigned number"
    },
    "cmt_reflow_mode": {
        "value": 0,
        "type": "ParamType.SET",
        "allowed": [
            "0",
            "1",
            "2"
        ],
        "doc": "# How to reflow comments.\n#\n# 0: No reflowing (apart from the line wrapping due to cmt_width) (default)\n# 1: No touching at all\n# 2: Full reflow\n",
        "line": "cmt_reflow_mode                 = 0        # unsigned number"
    },
    "cmt_convert_tab_to_spaces": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to convert all tabs to spaces in comments. If false, tabs in\n# comments are left alone, unless used for indenting.\n",
        "line": "cmt_convert_tab_to_spaces       = false    # true/false"
    },
    "cmt_indent_multi": {
        "value": "true",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to apply changes to multi-line comments, including cmt_width,\n# keyword substitution and leading chars.\n#\n# Default: true\n",
        "line": "cmt_indent_multi                = true     # true/false"
    },
    "cmt_c_group": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to group c-comments that look like they are in a block.\n",
        "line": "cmt_c_group                     = false    # true/false"
    },
    "cmt_c_nl_start": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to put an empty '/*' on the first line of the combined c-comment.\n",
        "line": "cmt_c_nl_start                  = false    # true/false"
    },
    "cmt_c_nl_end": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to add a newline before the closing '*/' of the combined c-comment.\n",
        "line": "cmt_c_nl_end                    = false    # true/false"
    },
    "cmt_cpp_to_c": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to change cpp-comments into c-comments.\n",
        "line": "cmt_cpp_to_c                    = false    # true/false"
    },
    "cmt_cpp_group": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to group cpp-comments that look like they are in a block. Only\n# meaningful if cmt_cpp_to_c=true.\n",
        "line": "cmt_cpp_group                   = false    # true/false"
    },
    "cmt_cpp_nl_start": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to put an empty '/*' on the first line of the combined cpp-comment\n# when converting to a c-comment.\n#\n# Requires cmt_cpp_to_c=true and cmt_cpp_group=true.\n",
        "line": "cmt_cpp_nl_start                = false    # true/false"
    },
    "cmt_cpp_nl_end": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to add a newline before the closing '*/' of the combined cpp-comment\n# when converting to a c-comment.\n#\n# Requires cmt_cpp_to_c=true and cmt_cpp_group=true.\n",
        "line": "cmt_cpp_nl_end                  = false    # true/false"
    },
    "cmt_star_cont": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to put a star on subsequent comment lines.\n",
        "line": "cmt_star_cont                   = false    # true/false"
    },
    "cmt_sp_before_star_cont": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# The number of spaces to insert at the start of subsequent comment lines.\n",
        "line": "cmt_sp_before_star_cont         = 0        # unsigned number"
    },
    "cmt_sp_after_star_cont": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# The number of spaces to insert after the star on subsequent comment lines.\n",
        "line": "cmt_sp_after_star_cont          = 0        # unsigned number"
    },
    "cmt_multi_check_last": {
        "value": "true",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# For multi-line comments with a '*' lead, remove leading spaces if the first\n# and last lines of the comment are the same length.\n#\n# Default: true\n",
        "line": "cmt_multi_check_last            = true     # true/false"
    },
    "cmt_multi_first_len_minimum": {
        "value": 4,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# For multi-line comments with a '*' lead, remove leading spaces if the first\n# and last lines of the comment are the same length AND if the length is\n# bigger as the first_len minimum.\n#\n# Default: 4\n",
        "line": "cmt_multi_first_len_minimum     = 4        # unsigned number"
    },
    "cmt_insert_file_header": {
        "value": "\"\"",
        "type": "ParamType.STRING",
        "allowed": null,
        "doc": "# Path to a file that contains text to insert at the beginning of a file if\n# the file doesn't start with a C/C++ comment. If the inserted text contains\n# '$(filename)', that will be replaced with the current file's name.\n",
        "line": "cmt_insert_file_header          = \"\"         # string"
    },
    "cmt_insert_file_footer": {
        "value": "\"\"",
        "type": "ParamType.STRING",
        "allowed": null,
        "doc": "# Path to a file that contains text to insert at the end of a file if the\n# file doesn't end with a C/C++ comment. If the inserted text contains\n# '$(filename)', that will be replaced with the current file's name.\n",
        "line": "cmt_insert_file_footer          = \"\"         # string"
    },
    "cmt_insert_func_header": {
        "value": "\"\"",
        "type": "ParamType.STRING",
        "allowed": null,
        "doc": "# Path to a file that contains text to insert before a function definition if\n# the function isn't preceded by a C/C++ comment. If the inserted text\n# contains '$(function)', '$(javaparam)' or '$(fclass)', these will be\n# replaced with, respectively, the name of the function, the javadoc '@param'\n# and '@return' stuff, or the name of the class to which the member function\n# belongs.\n",
        "line": "cmt_insert_func_header          = \"\"         # string"
    },
    "cmt_insert_class_header": {
        "value": "\"\"",
        "type": "ParamType.STRING",
        "allowed": null,
        "doc": "# Path to a file that contains text to insert before a class if the class\n# isn't preceded by a C/C++ comment. If the inserted text contains '$(class)',\n# that will be replaced with the class name.\n",
        "line": "cmt_insert_class_header         = \"\"         # string"
    },
    "cmt_insert_oc_msg_header": {
        "value": "\"\"",
        "type": "ParamType.STRING",
        "allowed": null,
        "doc": "# Path to a file that contains text to insert before an Objective-C message\n# specification, if the method isn't preceded by a C/C++ comment. If the\n# inserted text contains '$(message)' or '$(javaparam)', these will be\n# replaced with, respectively, the name of the function, or the javadoc\n# '@param' and '@return' stuff.\n",
        "line": "cmt_insert_oc_msg_header        = \"\"         # string"
    },
    "cmt_insert_before_preproc": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether a comment should be inserted if a preprocessor is encountered when\n# stepping backwards from a function name.\n#\n# Applies to cmt_insert_oc_msg_header, cmt_insert_func_header and\n# cmt_insert_class_header.\n",
        "line": "cmt_insert_before_preproc       = false    # true/false"
    },
    "cmt_insert_before_inlines": {
        "value": "true",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether a comment should be inserted if a function is declared inline to a\n# class definition.\n#\n# Applies to cmt_insert_func_header.\n#\n# Default: true\n",
        "line": "cmt_insert_before_inlines       = true     # true/false"
    },
    "cmt_insert_before_ctor_dtor": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether a comment should be inserted if the function is a class constructor\n# or destructor.\n#\n# Applies to cmt_insert_func_header.\n",
        "line": "cmt_insert_before_ctor_dtor     = false    # true/false"
    },
    "mod_full_brace_do": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove braces on a single-line 'do' statement.\n",
        "line": "mod_full_brace_do               = ignore   # ignore/add/remove/force"
    },
    "mod_full_brace_for": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove braces on a single-line 'for' statement.\n",
        "line": "mod_full_brace_for              = ignore   # ignore/add/remove/force"
    },
    "mod_full_brace_function": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# (Pawn) Add or remove braces on a single-line function definition.\n",
        "line": "mod_full_brace_function         = ignore   # ignore/add/remove/force"
    },
    "mod_full_brace_if": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove braces on a single-line 'if' statement. Braces will not be\n# removed if the braced statement contains an 'else'.\n",
        "line": "mod_full_brace_if               = ignore   # ignore/add/remove/force"
    },
    "mod_full_brace_if_chain": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to enforce that all blocks of an 'if'/'else if'/'else' chain either\n# have, or do not have, braces. If true, braces will be added if any block\n# needs braces, and will only be removed if they can be removed from all\n# blocks.\n#\n# Overrides mod_full_brace_if.\n",
        "line": "mod_full_brace_if_chain         = false    # true/false"
    },
    "mod_full_brace_if_chain_only": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to add braces to all blocks of an 'if'/'else if'/'else' chain.\n# If true, mod_full_brace_if_chain will only remove braces from an 'if' that\n# does not have an 'else if' or 'else'.\n",
        "line": "mod_full_brace_if_chain_only    = false    # true/false"
    },
    "mod_full_brace_while": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove braces on single-line 'while' statement.\n",
        "line": "mod_full_brace_while            = ignore   # ignore/add/remove/force"
    },
    "mod_full_brace_using": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove braces on single-line 'using ()' statement.\n",
        "line": "mod_full_brace_using            = ignore   # ignore/add/remove/force"
    },
    "mod_full_brace_nl": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# Don't remove braces around statements that span N newlines\n",
        "line": "mod_full_brace_nl               = 0        # unsigned number"
    },
    "mod_full_brace_nl_block_rem_mlcond": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to prevent removal of braces from 'if'/'for'/'while'/etc. blocks\n# which span multiple lines.\n#\n# Affects:\n#   mod_full_brace_for\n#   mod_full_brace_if\n#   mod_full_brace_if_chain\n#   mod_full_brace_if_chain_only\n#   mod_full_brace_while\n#   mod_full_brace_using\n#\n# Does not affect:\n#   mod_full_brace_do\n#   mod_full_brace_function\n",
        "line": "mod_full_brace_nl_block_rem_mlcond = false    # true/false"
    },
    "mod_paren_on_return": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove unnecessary parenthesis on 'return' statement.\n",
        "line": "mod_paren_on_return             = ignore   # ignore/add/remove/force"
    },
    "mod_pawn_semicolon": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# (Pawn) Whether to change optional semicolons to real semicolons.\n",
        "line": "mod_pawn_semicolon              = false    # true/false"
    },
    "mod_full_paren_if_bool": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to fully parenthesize Boolean expressions in 'while' and 'if'\n# statement, as in 'if (a && b > c)' => 'if (a && (b > c))'.\n",
        "line": "mod_full_paren_if_bool          = false    # true/false"
    },
    "mod_remove_extra_semicolon": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to remove superfluous semicolons.\n",
        "line": "mod_remove_extra_semicolon      = false    # true/false"
    },
    "mod_add_long_function_closebrace_comment": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# If a function body exceeds the specified number of newlines and doesn't have\n# a comment after the close brace, a comment will be added.\n",
        "line": "mod_add_long_function_closebrace_comment = 0        # unsigned number"
    },
    "mod_add_long_namespace_closebrace_comment": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# If a namespace body exceeds the specified number of newlines and doesn't\n# have a comment after the close brace, a comment will be added.\n",
        "line": "mod_add_long_namespace_closebrace_comment = 0        # unsigned number"
    },
    "mod_add_long_class_closebrace_comment": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# If a class body exceeds the specified number of newlines and doesn't have a\n# comment after the close brace, a comment will be added.\n",
        "line": "mod_add_long_class_closebrace_comment = 0        # unsigned number"
    },
    "mod_add_long_switch_closebrace_comment": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# If a switch body exceeds the specified number of newlines and doesn't have a\n# comment after the close brace, a comment will be added.\n",
        "line": "mod_add_long_switch_closebrace_comment = 0        # unsigned number"
    },
    "mod_add_long_ifdef_endif_comment": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# If an #ifdef body exceeds the specified number of newlines and doesn't have\n# a comment after the #endif, a comment will be added.\n",
        "line": "mod_add_long_ifdef_endif_comment = 0        # unsigned number"
    },
    "mod_add_long_ifdef_else_comment": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# If an #ifdef or #else body exceeds the specified number of newlines and\n# doesn't have a comment after the #else, a comment will be added.\n",
        "line": "mod_add_long_ifdef_else_comment = 0        # unsigned number"
    },
    "mod_sort_import": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to sort consecutive single-line 'import' statements.\n",
        "line": "mod_sort_import                 = false    # true/false"
    },
    "mod_sort_using": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# (C#) Whether to sort consecutive single-line 'using' statements.\n",
        "line": "mod_sort_using                  = false    # true/false"
    },
    "mod_sort_include": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to sort consecutive single-line '#include' statements (C/C++) and\n# '#import' statements (Objective-C). Be aware that this has the potential to\n# break your code if your includes/imports have ordering dependencies.\n",
        "line": "mod_sort_include                = false    # true/false"
    },
    "mod_move_case_break": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to move a 'break' that appears after a fully braced 'case' before\n# the close brace, as in 'case X: { ... } break;' => 'case X: { ... break; }'.\n",
        "line": "mod_move_case_break             = false    # true/false"
    },
    "mod_case_brace": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove braces around a fully braced case statement. Will only remove\n# braces if there are no variable declarations in the block.\n",
        "line": "mod_case_brace                  = ignore   # ignore/add/remove/force"
    },
    "mod_remove_empty_return": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to remove a void 'return;' that appears as the last statement in a\n# function.\n",
        "line": "mod_remove_empty_return         = false    # true/false"
    },
    "mod_enum_last_comma": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove the comma after the last value of an enumeration.\n",
        "line": "mod_enum_last_comma             = ignore   # ignore/add/remove/force"
    },
    "mod_sort_oc_properties": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# (OC) Whether to organize the properties. If true, properties will be\n# rearranged according to the mod_sort_oc_property_*_weight factors.\n",
        "line": "mod_sort_oc_properties          = false    # true/false"
    },
    "mod_sort_oc_property_class_weight": {
        "value": 0,
        "type": "ParamType.INTEGER",
        "allowed": null,
        "doc": "# (OC) Weight of a class property modifier.\n",
        "line": "mod_sort_oc_property_class_weight = 0        # number"
    },
    "mod_sort_oc_property_thread_safe_weight": {
        "value": 0,
        "type": "ParamType.INTEGER",
        "allowed": null,
        "doc": "# (OC) Weight of 'atomic' and 'nonatomic'.\n",
        "line": "mod_sort_oc_property_thread_safe_weight = 0        # number"
    },
    "mod_sort_oc_property_readwrite_weight": {
        "value": 0,
        "type": "ParamType.INTEGER",
        "allowed": null,
        "doc": "# (OC) Weight of 'readwrite' when organizing properties.\n",
        "line": "mod_sort_oc_property_readwrite_weight = 0        # number"
    },
    "mod_sort_oc_property_reference_weight": {
        "value": 0,
        "type": "ParamType.INTEGER",
        "allowed": null,
        "doc": "# (OC) Weight of a reference type specifier ('retain', 'copy', 'assign',\n# 'weak', 'strong') when organizing properties.\n",
        "line": "mod_sort_oc_property_reference_weight = 0        # number"
    },
    "mod_sort_oc_property_getter_weight": {
        "value": 0,
        "type": "ParamType.INTEGER",
        "allowed": null,
        "doc": "# (OC) Weight of getter type ('getter=') when organizing properties.\n",
        "line": "mod_sort_oc_property_getter_weight = 0        # number"
    },
    "mod_sort_oc_property_setter_weight": {
        "value": 0,
        "type": "ParamType.INTEGER",
        "allowed": null,
        "doc": "# (OC) Weight of setter type ('setter=') when organizing properties.\n",
        "line": "mod_sort_oc_property_setter_weight = 0        # number"
    },
    "mod_sort_oc_property_nullability_weight": {
        "value": 0,
        "type": "ParamType.INTEGER",
        "allowed": null,
        "doc": "# (OC) Weight of nullability type ('nullable', 'nonnull', 'null_unspecified',\n# 'null_resettable') when organizing properties.\n",
        "line": "mod_sort_oc_property_nullability_weight = 0        # number"
    },
    "pp_indent": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove indentation of preprocessor directives inside #if blocks\n# at brace level 0 (file-level).\n",
        "line": "pp_indent                       = ignore   # ignore/add/remove/force"
    },
    "pp_indent_at_level": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to indent #if/#else/#endif at the brace level. If false, these are\n# indented from column 1.\n",
        "line": "pp_indent_at_level              = false    # true/false"
    },
    "pp_indent_count": {
        "value": 1,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# Specifies the number of columns to indent preprocessors per level\n# at brace level 0 (file-level). If pp_indent_at_level=false, also specifies\n# the number of columns to indent preprocessors per level\n# at brace level > 0 (function-level).\n#\n# Default: 1\n",
        "line": "pp_indent_count                 = 1        # unsigned number"
    },
    "pp_space": {
        "value": "ignore",
        "type": "ParamType.SET",
        "allowed": [
            "ignore",
            "add",
            "remove",
            "force"
        ],
        "doc": "# Add or remove space after # based on pp_level of #if blocks.\n",
        "line": "pp_space                        = ignore   # ignore/add/remove/force"
    },
    "pp_space_count": {
        "value": 0,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# Sets the number of spaces per level added with pp_space.\n",
        "line": "pp_space_count                  = 0        # unsigned number"
    },
    "pp_indent_region": {
        "value": 0,
        "type": "ParamType.INTEGER",
        "allowed": null,
        "doc": "# The indent for '#region' and '#endregion' in C# and '#pragma region' in\n# C/C++. Negative values decrease indent down to the first column.\n",
        "line": "pp_indent_region                = 0        # number"
    },
    "pp_region_indent_code": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to indent the code between #region and #endregion.\n",
        "line": "pp_region_indent_code           = false    # true/false"
    },
    "pp_indent_if": {
        "value": 0,
        "type": "ParamType.INTEGER",
        "allowed": null,
        "doc": "# If pp_indent_at_level=true, sets the indent for #if, #else and #endif when\n# not at file-level. Negative values decrease indent down to the first column.\n#\n# =0: Indent preprocessors using output_tab_size\n# >0: Column at which all preprocessors will be indented\n",
        "line": "pp_indent_if                    = 0        # number"
    },
    "pp_if_indent_code": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to indent the code between #if, #else and #endif.\n",
        "line": "pp_if_indent_code               = false    # true/false"
    },
    "pp_define_at_level": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to indent '#define' at the brace level. If false, these are\n# indented from column 1.\n",
        "line": "pp_define_at_level              = false    # true/false"
    },
    "pp_ignore_define_body": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to ignore the '#define' body while formatting.\n",
        "line": "pp_ignore_define_body           = false    # true/false"
    },
    "pp_indent_case": {
        "value": "true",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to indent case statements between #if, #else, and #endif.\n# Only applies to the indent of the preprocesser that the case statements\n# directly inside of.\n#\n# Default: true\n",
        "line": "pp_indent_case                  = true     # true/false"
    },
    "pp_indent_func_def": {
        "value": "true",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to indent whole function definitions between #if, #else, and #endif.\n# Only applies to the indent of the preprocesser that the function definition\n# is directly inside of.\n#\n# Default: true\n",
        "line": "pp_indent_func_def              = true     # true/false"
    },
    "pp_indent_extern": {
        "value": "true",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to indent extern C blocks between #if, #else, and #endif.\n# Only applies to the indent of the preprocesser that the extern block is\n# directly inside of.\n#\n# Default: true\n",
        "line": "pp_indent_extern                = true     # true/false"
    },
    "pp_indent_brace": {
        "value": "true",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to indent braces directly inside #if, #else, and #endif.\n# Only applies to the indent of the preprocesser that the braces are directly\n# inside of.\n#\n# Default: true\n",
        "line": "pp_indent_brace                 = true     # true/false"
    },
    "include_category_0": {
        "value": "\"\"",
        "type": "ParamType.STRING",
        "allowed": null,
        "doc": "# The regex for include category with priority 0.\n",
        "line": "include_category_0              = \"\"         # string"
    },
    "include_category_1": {
        "value": "\"\"",
        "type": "ParamType.STRING",
        "allowed": null,
        "doc": "# The regex for include category with priority 1.\n",
        "line": "include_category_1              = \"\"         # string"
    },
    "include_category_2": {
        "value": "\"\"",
        "type": "ParamType.STRING",
        "allowed": null,
        "doc": "# The regex for include category with priority 2.\n",
        "line": "include_category_2              = \"\"         # string"
    },
    "use_indent_func_call_param": {
        "value": "true",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# true:  indent_func_call_param will be used (default)\n# false: indent_func_call_param will NOT be used\n#\n# Default: true\n",
        "line": "use_indent_func_call_param      = true     # true/false"
    },
    "use_indent_continue_only_once": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# The value of the indentation for a continuation line is calculated\n# differently if the statement is:\n# - a declaration: your case with QString fileName ...\n# - an assignment: your case with pSettings = new QSettings( ...\n#\n# At the second case the indentation value might be used twice:\n# - at the assignment\n# - at the function call (if present)\n#\n# To prevent the double use of the indentation value, use this option with the\n# value 'true'.\n#\n# true:  indent_continue will be used only once\n# false: indent_continue will be used every time (default)\n",
        "line": "use_indent_continue_only_once   = false    # true/false"
    },
    "indent_cpp_lambda_only_once": {
        "value": "false",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# The value might be used twice:\n# - at the assignment\n# - at the opening brace\n#\n# To prevent the double use of the indentation value, use this option with the\n# value 'true'.\n#\n# true:  indentation will be used only once\n# false: indentation will be used every time (default)\n",
        "line": "indent_cpp_lambda_only_once     = false    # true/false"
    },
    "use_options_overriding_for_qt_macros": {
        "value": "true",
        "type": "ParamType.SET",
        "allowed": [
            "true",
            "false"
        ],
        "doc": "# Whether to apply special formatting for Qt SIGNAL/SLOT macros. Essentially,\n# this tries to format these so that they match Qt's normalized form (i.e. the\n# result of QMetaObject::normalizedSignature), which can slightly improve the\n# performance of the QObject::connect call, rather than how they would\n# otherwise be formatted.\n#\n# See options_for_QT.cpp for details.\n#\n# Default: true\n",
        "line": "use_options_overriding_for_qt_macros = true     # true/false"
    },
    "warn_level_tabs_found_in_verbatim_string_literals": {
        "value": 2,
        "type": "ParamType.UNSIGNED",
        "allowed": null,
        "doc": "# (C#) Warning is given if doing tab-to-\\t replacement and we have found one\n# in a C# verbatim string literal.\n#\n# Default: 2\n",
        "line": "warn_level_tabs_found_in_verbatim_string_literals = 2        # unsigned number"
    }
}